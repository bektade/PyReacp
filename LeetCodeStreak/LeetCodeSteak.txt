{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e2595e2e",
   "metadata": {},
   "source": [
    "# Leet code streak"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5383a36",
   "metadata": {},
   "source": [
    "## 1603. Design Parking System\n",
    "\n",
    "**Easy** (`Amazon` `Bloomberg` `Microsoft`)\n",
    "\n",
    "Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.\n",
    "\n",
    "Implement the ParkingSystem class:\n",
    "\n",
    "- ParkingSystem(int big, int medium, int small) Initializes object of the ParkingSystem class. The number of slots for each parking space are given as part of the constructor.\n",
    "\n",
    "\n",
    "- bool addCar(int carType) Checks whether there is a parking space of carType for the car that wants to get into the parking lot. carType can be of three kinds: big, medium, or small, which are represented by 1, 2, and 3 respectively. A car can only park in a parking space of its carType. If there is no space available, return false, else park the car in that size space and return true."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2001cb90",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "there's lot for parking big car ? : True\n",
      "there's lot for parking mid car ? : True\n",
      "there's lot for parking mid car ? : False\n"
     ]
    }
   ],
   "source": [
    "class ParkingSystem(object):\n",
    "\n",
    "    #constructor\n",
    "    def __init__(self, big, medium, small):\n",
    "        \"\"\"\n",
    "        :type big: int\n",
    "        :type medium: int\n",
    "        :type small: int\n",
    "        \"\"\"\n",
    "\n",
    "        self.slots = {\n",
    "            1: big,\n",
    "            2: medium,\n",
    "            3: small\n",
    "        }\n",
    "        \n",
    "\n",
    "    def addCar(self, carType):\n",
    "        \"\"\"\n",
    "        :type carType: int\n",
    "        :rtype: bool\n",
    "        \"\"\"\n",
    "        if self.slots[carType] > 0:\n",
    "            self.slots[carType] -= 1\n",
    "            return True\n",
    "        else:\n",
    "            return False\n",
    "        \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#input1 = [\"ParkingSystem\", \"addCar\", \"addCar\", \"addCar\", \"addCar\"]\n",
    "input1 = [[1, 1, 0], [1], [2], [3], [1]]\n",
    "\n",
    "# init parking system with slots (big, mid, small) == (1, 1, 0)\n",
    "parkingObj = ParkingSystem(1, 1, 0)\n",
    "\n",
    "# returns true because there's one slot for big car\n",
    "print(\"there's lot for parking big car ? :\",parkingObj.addCar(1))\n",
    "\n",
    "# returns true because there's one slot for mid car\n",
    "print(\"there's lot for parking mid car ? :\",parkingObj.addCar(2))\n",
    "\n",
    "# returns false because there's no slot for small car\n",
    "print(\"there's lot for parking mid car ? :\",parkingObj.addCar(3))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22a0ccdd",
   "metadata": {},
   "source": [
    "## 705. Design HashSet \n",
    "**Easy** (`Microsoft` `Apple` `Amazon` )\n",
    "\n",
    "Design a HashSet without using any built-in hash table libraries.\n",
    "\n",
    "Implement MyHashSet class:\n",
    "\n",
    "void add(key) Inserts the value key into the HashSet.\n",
    "bool contains(key) Returns whether the value key exists in the HashSet or not.\n",
    "void remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6002a87c",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "\n",
    "Example 1:\n",
    "\n",
    "Input\n",
    "[\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"]\n",
    "[[], [1], [2], [1], [3], [2], [2], [2], [2]]\n",
    "Output\n",
    "[null, null, null, true, false, null, true, null, false]\n",
    "\n",
    "Explanation\n",
    "MyHashSet myHashSet = new MyHashSet();\n",
    "myHashSet.add(1);      // set = [1]\n",
    "myHashSet.add(2);      // set = [1, 2]\n",
    "myHashSet.contains(1); // return True\n",
    "myHashSet.contains(3); // return False, (not found)\n",
    "myHashSet.add(2);      // set = [1, 2]\n",
    "myHashSet.contains(2); // return True\n",
    "myHashSet.remove(2);   // set = [1]\n",
    "myHashSet.contains(2); // return False, (already removed)\n",
    "\n",
    "\n",
    "Constraints:\n",
    "\n",
    "0 <= key <= 106\n",
    "At most 104 calls will be made to add, remove, and contains.\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "class MyHashSet(object):\n",
    "\n",
    "    def __init__(self):\n",
    "\n",
    "        self.hashset = [False] * 1000001\n",
    "        \n",
    "\n",
    "    def add(self, key):\n",
    "        \"\"\"\n",
    "        :type key: int\n",
    "        :rtype: None\n",
    "        \"\"\"\n",
    "        self.hashset[key] = True\n",
    "        \n",
    "\n",
    "    def remove(self, key):\n",
    "        \"\"\"\n",
    "        :type key: int\n",
    "        :rtype: None\n",
    "        \"\"\"\n",
    "        self.hashset[key] = False\n",
    "        \n",
    "\n",
    "    def contains(self, key):\n",
    "        \"\"\"\n",
    "        :type key: int\n",
    "        :rtype: bool\n",
    "        \"\"\"\n",
    "        return self.hashset[key]\n",
    "        \n",
    "\n",
    "\n",
    "# Your MyHashSet object will be instantiated and called as such:\n",
    "# obj = MyHashSet()\n",
    "# obj.add(key)\n",
    "# obj.remove(key)\n",
    "# param_3 = obj.contains(key)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b3fc09e",
   "metadata": {},
   "source": [
    "## 1396. Design Underground System (`Not-solved Yet`)\n",
    "\n",
    "**Medium** (`Bloomberg`, `Amazon`)\n",
    "\n",
    "\n",
    "An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate the average time it takes to travel from one station to another.\n",
    "\n",
    "Implement the `UndergroundSystem` class:\n",
    "\n",
    "- `void checkIn(int id, string stationName, int t)`\n",
    "\n",
    "        - A customer with a card ID equal to id, checks in at the station stationName at time t.\n",
    "        - A customer can only be checked into one place at a time.\n",
    "        \n",
    "- `void checkOut(int id, string stationName, int t)`\n",
    "\n",
    "        - A customer with a card ID equal to id, checks out from the station stationName at time t.\n",
    "    \n",
    "- `double getAverageTime(string startStation, string endStation)`\n",
    "\n",
    "        - Returns the average time it takes to travel from startStation to endStation.\n",
    "\n",
    "        - The average time is computed from all the previous traveling times from startStation to endStation that happened directly, meaning a check in at startStation followed by a check out from endStation.\n",
    "\n",
    "        - The time it takes to travel from startStation to endStation may be different from the time it takes to travel from endStation to startStation.\n",
    "\n",
    "        - There will be at least one customer that has traveled from startStation to endStation before getAverageTime is called.\n",
    "    \n",
    "    \n",
    "You may assume all calls to the `checkIn` and `checkOut` methods are consistent. If a customer checks in at time t1 then checks out at time t2, then t1 < t2. All events happen in chronological order.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ec574011",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input\n",
    "[\"UndergroundSystem\",\"checkIn\",\"checkIn\",\"checkIn\",\"checkOut\",\"checkOut\",\"checkOut\",\"getAverageTime\",\"getAverageTime\",\"checkIn\",\"getAverageTime\",\"checkOut\",\"getAverageTime\"]\n",
    "[[],[45,\"Leyton\",3],[32,\"Paradise\",8],[27,\"Leyton\",10],[45,\"Waterloo\",15],[27,\"Waterloo\",20],[32,\"Cambridge\",22],[\"Paradise\",\"Cambridge\"],[\"Leyton\",\"Waterloo\"],[10,\"Leyton\",24],[\"Leyton\",\"Waterloo\"],[10,\"Waterloo\",38],[\"Leyton\",\"Waterloo\"]]\n",
    "\n",
    "Output\n",
    "[null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]\n",
    "\n",
    "Explanation\n",
    "UndergroundSystem undergroundSystem = new UndergroundSystem();\n",
    "undergroundSystem.checkIn(45, \"Leyton\", 3);\n",
    "undergroundSystem.checkIn(32, \"Paradise\", 8);\n",
    "undergroundSystem.checkIn(27, \"Leyton\", 10);\n",
    "undergroundSystem.checkOut(45, \"Waterloo\", 15);  // Customer 45 \"Leyton\" -> \"Waterloo\" in 15-3 = 12\n",
    "undergroundSystem.checkOut(27, \"Waterloo\", 20);  // Customer 27 \"Leyton\" -> \"Waterloo\" in 20-10 = 10\n",
    "undergroundSystem.checkOut(32, \"Cambridge\", 22); // Customer 32 \"Paradise\" -> \"Cambridge\" in 22-8 = 14\n",
    "undergroundSystem.getAverageTime(\"Paradise\", \"Cambridge\"); // return 14.00000. One trip \"Paradise\" -> \"Cambridge\", (14) / 1 = 14\n",
    "undergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 11.00000. Two trips \"Leyton\" -> \"Waterloo\", (10 + 12) / 2 = 11\n",
    "undergroundSystem.checkIn(10, \"Leyton\", 24);\n",
    "undergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 11.00000\n",
    "undergroundSystem.checkOut(10, \"Waterloo\", 38);  // Customer 10 \"Leyton\" -> \"Waterloo\" in 38-24 = 14\n",
    "undergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 12.00000. Three trips \"Leyton\" -> \"Waterloo\", (10 + 12 + 14) / 3 = 12\n",
    "Example 2:\n",
    "\n",
    "Input\n",
    "[\"UndergroundSystem\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\"]\n",
    "[[],[10,\"Leyton\",3],[10,\"Paradise\",8],[\"Leyton\",\"Paradise\"],[5,\"Leyton\",10],[5,\"Paradise\",16],[\"Leyton\",\"Paradise\"],[2,\"Leyton\",21],[2,\"Paradise\",30],[\"Leyton\",\"Paradise\"]]\n",
    "\n",
    "Output\n",
    "[null,null,null,5.00000,null,null,5.50000,null,null,6.66667]\n",
    "\n",
    "Explanation\n",
    "UndergroundSystem undergroundSystem = new UndergroundSystem();\n",
    "undergroundSystem.checkIn(10, \"Leyton\", 3);\n",
    "undergroundSystem.checkOut(10, \"Paradise\", 8); // Customer 10 \"Leyton\" -> \"Paradise\" in 8-3 = 5\n",
    "undergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 5.00000, (5) / 1 = 5\n",
    "undergroundSystem.checkIn(5, \"Leyton\", 10);\n",
    "undergroundSystem.checkOut(5, \"Paradise\", 16); // Customer 5 \"Leyton\" -> \"Paradise\" in 16-10 = 6\n",
    "undergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 5.50000, (5 + 6) / 2 = 5.5\n",
    "undergroundSystem.checkIn(2, \"Leyton\", 21);\n",
    "undergroundSystem.checkOut(2, \"Paradise\", 30); // Customer 2 \"Leyton\" -> \"Paradise\" in 30-21 = 9\n",
    "undergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 6.66667, (5 + 6 + 9) / 3 = 6.66667\n",
    "\n",
    "Constraints:\n",
    "\n",
    "1 <= id, t <= 106\n",
    "1 <= stationName.length, startStation.length, endStation.length <= 10\n",
    "All strings consist of uppercase and lowercase English letters and digits.\n",
    "There will be at most 2 * 104 calls in total to checkIn, checkOut, and getAverageTime.\n",
    "Answers within 10-5 of the actual value will be accepted.\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "\n",
    "class UndergroundSystem(object):\n",
    "\n",
    "    def __init__(self):\n",
    "        self.check_ins = {}  # Stores check-in information {id: (station, time)}\n",
    "        self.travel_times = {}  # Stores travel times {(start_station, end_station): [travel_time1, travel_time2, ...]}\n",
    "        \n",
    "\n",
    "    def checkIn(self, id, stationName, t):\n",
    "        self.check_ins[id] = (stationName, t)\n",
    "\n",
    "    def checkOut(self, id, stationName, t):\n",
    "        start_station, start_time = self.check_ins[id]\n",
    "        end_station = stationName\n",
    "        travel_time = t - start_time\n",
    "        \n",
    "        # Update travel times dictionary\n",
    "        if (start_station, end_station) in self.travel_times:\n",
    "            self.travel_times[(start_station, end_station)].append(travel_time)\n",
    "        else:\n",
    "            self.travel_times[(start_station, end_station)] = [travel_time]\n",
    "        \n",
    "        # Remove check-in record\n",
    "        del self.check_ins[id]\n",
    "\n",
    "    def getAverageTime(self, startStation, endStation):\n",
    "        travel_times = self.travel_times.get((startStation, endStation), [])\n",
    "        average_time = sum(travel_times) / len(travel_times)\n",
    "        return round(average_time, 5)\n",
    "        \n",
    "\n",
    "\n",
    "\n",
    "# Your UndergroundSystem object will be instantiated and called as such:\n",
    "# obj = UndergroundSystem()\n",
    "# obj.checkIn(id,stationName,t)\n",
    "# obj.checkOut(id,stationName,t)\n",
    "# param_3 = obj.getAverageTime(startStation,endStation)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3eec3f68",
   "metadata": {},
   "source": [
    "## 1091. Shortest Path in Binary Matrix\n",
    "\n",
    "**Medium** (`Facebook` `Amazon` `Google`)\n",
    "\n",
    "Given an `n x n` binary matrix `grid`, return the length of the shortest clear path in the matrix. If there is no clear path, return `-1`.\n",
    "\n",
    "A **clear path** in a binary matrix is a path from the **top-left** cell (i.e., `(0, 0)`) to the bottom-right cell (i.e., (`n - 1, n - 1`)) such that:\n",
    "\n",
    "    - All the visited cells of the path are `0`.\n",
    "    - All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).\n",
    "    \n",
    "The **length of a clear path** is the number of visited cells of this path.\n",
    "\n",
    "**Example-1**\n",
    "\n",
    "![title](img/shortestPath1.png)\n",
    "\n",
    "`Input: grid = [[0,1],[1,0]]`\n",
    "\n",
    "`Output: 2`\n",
    "\n",
    "**Example-2**\n",
    "\n",
    "![title](img/shortestPath2.png)\n",
    "\n",
    "`Input: grid = [[0,0,0],[1,1,0],[1,1,0]]`\n",
    "\n",
    "`Output: 4`\n",
    "\n",
    "**Example-3**\n",
    "\n",
    "`Input: grid = [[1,0,0],[1,1,0],[1,1,0]]`\n",
    "\n",
    "`Output: -1`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b9f55035",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sortest path is:  2\n",
      "sortest path is:  4\n",
      "sortest path is:  -1\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Constraints:\n",
    "\n",
    "n == grid.length\n",
    "n == grid[i].length\n",
    "1 <= n <= 100\n",
    "grid[i][j] is 0 or 1\n",
    "\n",
    "\"\"\"\n",
    "from collections import deque\n",
    "\n",
    "def shortestPathBinaryMatrix(grid):\n",
    "    \"\"\"\n",
    "    :type grid: List[List[int]]\n",
    "    :rtype: int\n",
    "    \"\"\"\n",
    "\n",
    "    n = len(grid)\n",
    "    if grid[0][0] == 1 or grid[n-1][n-1] == 1:\n",
    "        return -1\n",
    "\n",
    "    queue = deque([(0, 0)])\n",
    "    visited = set([(0, 0)])\n",
    "    distance = 1\n",
    "\n",
    "    while queue:\n",
    "        size = len(queue)\n",
    "        for _ in range(size):\n",
    "            row, col = queue.popleft()\n",
    "            if row == n - 1 and col == n - 1:\n",
    "                return distance\n",
    "            for dr in [-1, 0, 1]:\n",
    "                for dc in [-1, 0, 1]:\n",
    "                    new_row, new_col = row + dr, col + dc\n",
    "                    if 0 <= new_row < n and 0 <= new_col < n and (new_row, new_col) not in visited and grid[new_row][new_col] == 0:\n",
    "                        queue.append((new_row, new_col))\n",
    "                        visited.add((new_row, new_col))\n",
    "        distance += 1\n",
    "\n",
    "    return -1\n",
    "\n",
    "grid1 = [[0,1],[1,0]]\n",
    "grid2 = [[0,0,0],[1,1,0],[1,1,0]]\n",
    "grid3 = [[1,0,0],[1,1,0],[1,1,0]]\n",
    "\n",
    "\n",
    "print(\"sortest path is: \",shortestPathBinaryMatrix(grid1))\n",
    "print(\"sortest path is: \",shortestPathBinaryMatrix(grid2))\n",
    "print(\"sortest path is: \",shortestPathBinaryMatrix(grid3))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e50812f3",
   "metadata": {},
   "source": [
    "## 2101. Detonate the Maximum Bombs \n",
    "**(didn't pass test cases yet 100% yet)**\n",
    "\n",
    "**Medium**   (`Google`, `Qualtrics`)\n",
    "\n",
    "You are given a list of bombs. The **range** of a bomb is defined as the area where its effect can be felt. This area is in the shape of a **circle** with the center as the location of the bomb.\n",
    "\n",
    "The bombs are represented by a **0-indexed** 2D integer array `bombs` where `bombs[i] = [xi, yi, ri]`. `xi` and `yi` denote the X-coordinate and Y-coordinate of the location of the ith bomb, whereas ri denotes the radius of its range.\n",
    "\n",
    "You may choose to detonate a single bomb. When a bomb is detonated, it will detonate all bombs that lie in its range. These bombs will further detonate the bombs that lie in their ranges.\n",
    "\n",
    "Given the list of bombs, return the maximum number of bombs that can be detonated if you are allowed to detonate only one bomb.\n",
    "\n",
    "\n",
    "<img src=\"img/bombs1.png\" alt=\"Image Title\" width=\"300\" height=\"300\">\n",
    "Example 1:\n",
    "Input: bombs = [[2,1,3],[6,1,4]]\n",
    "Output: 2\n",
    "Explanation:\n",
    "The above figure shows the positions and ranges of the 2 bombs.\n",
    "If we detonate the left bomb, the right bomb will not be affected.\n",
    "But if we detonate the right bomb, both bombs will be detonated.\n",
    "So the maximum bombs that can be detonated is max(1, 2) = 2.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "<img src=\"img/bombs2.png\" alt=\"Image Title\" width=\"300\" height=\"300\">\n",
    "\n",
    "\n",
    "Example 2:\n",
    "Input: bombs = [[1,1,5],[10,10,5]]\n",
    "Output: 1\n",
    "Explanation:\n",
    "Detonating either bomb will not detonate the other bomb, so the maximum number of bombs that can be detonated is 1.\n",
    "\n",
    "\n",
    "<img src=\"img/bombs3.png\" alt=\"Image Title\" width=\"450\" height=\"300\">\n",
    "\n",
    "Example 3:\n",
    "Input: bombs = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,6,4]]\n",
    "Output: 5\n",
    "Explanation:\n",
    "The best bomb to detonate is bomb 0 because:\n",
    "- Bomb 0 detonates bombs 1 and 2. The red circle denotes the range of bomb 0.\n",
    "- Bomb 2 detonates bomb 3. The blue circle denotes the range of bomb 2.\n",
    "- Bomb 3 detonates bomb 4. The green circle denotes the range of bomb 3.\n",
    "Thus all 5 bombs are detonated."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "87d74ed2",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Constraints:\n",
    "\n",
    "1 <= bombs.length <= 100\n",
    "bombs[i].length == 3\n",
    "1 <= xi, yi, ri <= 105\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "class Solution(object):\n",
    "    def maximumDetonation(self, bombs):\n",
    "        \"\"\"\n",
    "        :type bombs: List[List[int]]\n",
    "        :rtype: int\n",
    "        \"\"\"\n",
    "\n",
    "        max_detonations = 0\n",
    "        \n",
    "        for i in range(len(bombs)):\n",
    "            detonations = self.simulateDetonation(i, bombs)\n",
    "            max_detonations = max(max_detonations, detonations)\n",
    "        \n",
    "        return max_detonations\n",
    "    \n",
    "    def simulateDetonation(self, initial_bomb, bombs):\n",
    "        detonated = set()\n",
    "        queue = deque([initial_bomb])\n",
    "        \n",
    "        while queue:\n",
    "            current_bomb = queue.popleft()\n",
    "            \n",
    "            if current_bomb not in detonated:\n",
    "                detonated.add(current_bomb)\n",
    "                \n",
    "                for i in range(len(bombs)):\n",
    "                    if i != current_bomb:\n",
    "                        distance = ((bombs[current_bomb][0] - bombs[i][0]) ** 2 + (bombs[current_bomb][1] - bombs[i][1]) ** 2) ** 0.5\n",
    "                        if distance <= bombs[current_bomb][2]:\n",
    "                            queue.append(i)\n",
    "        \n",
    "        return len(detonated)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "632309a5",
   "metadata": {},
   "source": [
    "## 1376. Time Needed to Inform All Employees\n",
    "\n",
    "**Medium**   (`Google`, `Amazon`, `Bloomberg`) \n",
    "\n",
    "\n",
    "A company has n employees with a unique ID for each employee from 0 to n - 1. The head of the company is the one with headID.\n",
    "\n",
    "Each employee has one direct manager given in the manager array where manager[i] is the direct manager of the i-th employee, manager[headID] = -1. Also, it is guaranteed that the subordination relationships have a tree structure.\n",
    "\n",
    "The head of the company wants to inform all the company employees of an urgent piece of news. He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news.\n",
    "\n",
    "The i-th employee needs informTime[i] minutes to inform all of his direct subordinates (i.e., After informTime[i] minutes, all his direct subordinates can start spreading the news).\n",
    "\n",
    "Return the number of minutes needed to inform all the employees about the urgent news.\n",
    "\n",
    "![title](img/inform.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b1bcd25e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: n = 1, headID = 0, manager = [-1], informTime = [0]\n",
    "Output: 0\n",
    "Explanation: The head of the company is the only employee in the company.\n",
    "\n",
    "\n",
    "example-2:\n",
    "Input: n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]\n",
    "Output: 1\n",
    "Explanation: The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all.\n",
    "The tree structure of the employees in the company is shown.\n",
    "\n",
    "\n",
    "Constraints:\n",
    "\n",
    "1 <= n <= 105\n",
    "0 <= headID < n\n",
    "manager.length == n\n",
    "0 <= manager[i] < n\n",
    "manager[headID] == -1\n",
    "informTime.length == n\n",
    "0 <= informTime[i] <= 1000\n",
    "informTime[i] == 0 if employee i has no subordinates.\n",
    "It is guaranteed that all the employees can be informed.\n",
    "\"\"\"\n",
    "\n",
    "def numOfMinutes(n, headID, manager, informTime):\n",
    "    \"\"\"\n",
    "    :type n: int\n",
    "    :type headID: int\n",
    "    :type manager: List[int]\n",
    "    :type informTime: List[int]\n",
    "    :rtype: int\n",
    "    \"\"\"\n",
    "\n",
    "    subordinates = {}\n",
    "    for i in range(n):\n",
    "        if i != headID:\n",
    "            manager_id = manager[i]\n",
    "            if manager_id not in subordinates:\n",
    "                subordinates[manager_id] = []\n",
    "            subordinates[manager_id].append(i)\n",
    "\n",
    "    # Define a recursive function to calculate the time needed\n",
    "    def calculate_time(employee_id):\n",
    "        if employee_id not in subordinates:\n",
    "            return 0\n",
    "\n",
    "        max_time = 0\n",
    "        for subordinate_id in subordinates[employee_id]:\n",
    "            max_time = max(max_time, calculate_time(subordinate_id))\n",
    "\n",
    "        return informTime[employee_id] + max_time\n",
    "\n",
    "    return calculate_time(headID)\n",
    "\n",
    "\n",
    "print(numOfMinutes(1, 0, [-1], [0]))\n",
    "print(numOfMinutes(6, 2, [2,2,-1,2,2,2], [0,0,1,0,0,0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18178218",
   "metadata": {},
   "source": [
    "## 1502. Can Make Arithmetic Progression From Sequence\n",
    "\n",
    "**easy** `Amazon`\n",
    "\n",
    "A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.\n",
    "\n",
    "Given an array of numbers arr, return true if the array can be rearranged to form an arithmetic progression. Otherwise, return false"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "464ae5ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n",
      "True\n",
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: arr = [3,5,1]\n",
    "Output: true\n",
    "Explanation: We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.\n",
    "Example 2:\n",
    "\n",
    "Input: arr = [1,2,4]\n",
    "Output: false\n",
    "Explanation: There is no way to reorder the elements to obtain an arithmetic progression.\n",
    " \n",
    "\n",
    "Constraints:\n",
    "\n",
    "2 <= arr.length <= 1000\n",
    "-106 <= arr[i] <= 106\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def canMakeArithmeticProgression(arr):\n",
    "    \"\"\"\n",
    "    :type arr: List[int]\n",
    "    :rtype: bool\n",
    "    \"\"\"\n",
    "\n",
    "    arr.sort()\n",
    "\n",
    "    diff = arr[1] - arr[0]\n",
    "    last = arr[0] - diff\n",
    "\n",
    "    for x in arr :\n",
    "        if x - last != diff : \n",
    "            return False\n",
    "        last = x\n",
    "\n",
    "    return True\n",
    "    \n",
    "    \n",
    "arr1 = [3,5,1]  # True\n",
    "arr2 = [1,2,4]  #False\n",
    "arr3 = [1, 100] #True\n",
    "arr4 = [5, 55]  #True\n",
    "arr5 = [13,12,-12,9,9,16,7,-10,-20,0,18,-1,-20,-10,-8,15,15,16,2,15]  #False\n",
    "\n",
    "print(canMakeArithmeticProgression(arr1))\n",
    "print(canMakeArithmeticProgression(arr2))\n",
    "print(canMakeArithmeticProgression(arr3))\n",
    "print(canMakeArithmeticProgression(arr4))\n",
    "print(canMakeArithmeticProgression(arr5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "125dab66",
   "metadata": {},
   "source": [
    "## 1732. Find the Highest Altitude\n",
    "\n",
    "**Easy** | `Apple`\n",
    "\n",
    "There is a biker going on a road trip. The road trip consists of n + 1 points at different altitudes. The biker starts his trip on point 0 with altitude equal 0.\n",
    "\n",
    "You are given an integer array gain of length n where gain[i] is the net gain in altitude between points `i` and `i + 1` for all `(0 <= i < n)`. \n",
    "\n",
    "Return the highest altitude of a point.\n",
    "\n",
    "\n",
    "\n",
    "#### Intuition\n",
    "<!-- Describe your first thoughts on how to solve this problem. -->\n",
    "\n",
    "The problem asks us to calculate the `altitude gained` at each step and determine the maximum altitude reached. We start from an `initial altitude` of `0` and add the gain at each step to the previous altitude. \n",
    "\n",
    "Our goal is to find the `highest altitude` obtained during this process.\n",
    "\n",
    "\n",
    "#### Approach\n",
    "<!-- Describe your approach to solving the problem. -->\n",
    "\n",
    "1. Initialize a list called `altGains` with a single element `0`, representing the `initial altitude`.\n",
    "2. Iterate through the `\"gain\"` list using a for loop, where `i` represents the index of the current gain value.\n",
    "3. Calculate the `current altitude` by adding the current gain value with the previous altitude which is `altGains[i]`.\n",
    "4. Append the current altitude to the `altGains`list.\n",
    "5. After the loop, use the `max()` function to find the maximum value in the `altGains` list, which represents the highest altitude reached.\n",
    "6. Return the `maximum altitude`.\n",
    "\n",
    "#### Complexity\n",
    "\n",
    "#### Time complexity:\n",
    "<!-- Add your time complexity here, e.g. $$O(n)$$ -->\n",
    "\n",
    " The algorithm iterates through the `gain` list **once**, performing a   constant amount of work for each gain value. Therefore, the time complexity is `O(n)`, where `n` is the length of the `gain` list.\n",
    "\n",
    "\n",
    "\n",
    "#### Space complexity:\n",
    "<!-- Add your space complexity here, e.g. $$O(n)$$ -->\n",
    "The additional space used by the algorithm is the `altGains` list, which has a length of `n + 1`. Thus, the space complexity is `O(n)` as well, considering the worst case scenario where all gains are positive and distinct\n",
    "\n",
    "#### Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1eb13fcb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: gain = [-5,1,5,0,-7]\n",
    "Output: 1\n",
    "Explanation: The altitudes are [0,-5,-4,1,1,-6]. The highest is 1.\n",
    "Example 2:\n",
    "\n",
    "Input: gain = [-4,-3,-2,-1,4,3,2]\n",
    "Output: 0\n",
    "Explanation: The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0.\n",
    "\"\"\"\n",
    "\n",
    "def largestAltitude(gain):\n",
    "    \n",
    "    altGains = [0, ]\n",
    "    \n",
    "    for i in range(len(gain)):\n",
    "        \n",
    "        curAlt = gain[i] + altGains[i]\n",
    "        \n",
    "        altGains.append(curAlt)\n",
    "        \n",
    "        \n",
    "    return max(altGains)\n",
    "\n",
    "gain1 = [-5,1,5,0,-7]\n",
    "gain2 = [-4,-3,-2,-1,4,3,2]\n",
    "\n",
    "print(largestAltitude(gain1))\n",
    "print(largestAltitude(gain2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0af6b6b0",
   "metadata": {},
   "source": [
    "## 2090. K Radius Subarray Averages\n",
    "\n",
    "**Medium** | `Facebook` `Duolingo`\n",
    "\n",
    "You are given a `0`-indexed array nums of `n` integers, and an integer `k`.\n",
    "\n",
    "The `k-radius average` for a subarray of nums centered at some index `i` with the radius `k` is the average of all elements in nums between the indices `i - k` and `i + k` (inclusive). If there are **less** than `k` elements before or after the index `i`, then the `k-radius` average is `-1`.\n",
    "\n",
    "Build and return an array avgs of length `n` where `avgs[i]` is the `k-radius` average for the subarray centered at index `i`.\n",
    "\n",
    "The average of `x` elements is the sum of the `x` elements divided by `x`, using integer division. The integer division truncates toward zero, which means losing its fractional part.\n",
    "\n",
    "For example, the average of four elements `2, 3, 1,` and `5` is `(2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75,` which truncates to `2`.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25b82b42",
   "metadata": {},
   "source": [
    "### Intuition\n",
    "To find the `k-radius` average for each subarray centered at index `i`, we can calculate the sum of the subarray using `prefix sums`. By maintaining the prefix sums array, we can obtain the sum of any subarray in **constant time**. Then, we divide the sum by the number of elements in the subarray to obtain the average.\n",
    "\n",
    "### Approach\n",
    "\n",
    "1. Create an array avgs of length n to store the `k-radius` averages. Initialize all elements in avgs to `-1`.\n",
    "2. Create a prefix sums array prefix_sums of `length n+1`. Initialize `prefix_sums[0]` to `0`.\n",
    "3. Calculate the prefix sums by iterating over the input array nums from index `1` to `n`. For each index `i`, set `prefix_sums[i]` to `prefix_sums[i-1]` + `nums[i-1]`. This step allows us to obtain the sum of any subarray using prefix sums.\n",
    "4. Iterate over each index i in the range from 0 to `n-1`:\n",
    "- Calculate the left and right boundaries of the subarray centered at index i with radius `k`. The left boundary is `max(0, i-k)` and the right boundary is `min(n, i+k+1)`.\n",
    "- Calculate the count of elements in the subarray, which is `right` - `left`\n",
    "- If the count is greater than or equal to `2k+1`, it means the subarray has enough elements to calculate the average:\n",
    "    -  Calculate the sum of the subarray using prefix sums: `prefix_sums[right]` - `prefix_sums[left]`.\n",
    "    - Divide the sum by the count to obtain the average.\n",
    "    - Set `avgs[i]` to the average.\n",
    "5. Return the avgs array.\n",
    "\n",
    "### Complexity\n",
    "- **Time complexity:**\n",
    "    - Constructing the prefix sums array takes `O(n)` time.\n",
    "Calculating the k-radius averages takes `O(n)` time since we iterate over each index once and perform constant time operations for each index.\n",
    "Therefore, the overall time complexity is `O(n)`.\n",
    "\n",
    "\n",
    "- **Space complexity:**\n",
    "    - We use additional space to store the avgs array and the prefix sums array, both of which have a length of `n`. Thus, the space complexity is `O(n)`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "94dcf010",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1, -1, -1, -1, -1, -1, -1, -1, -1]\n",
      "[-1]\n",
      "[100000]\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Input: nums = [7,4,3,9,1,8,5,2,6], k = 3\n",
    "Output: [-1,-1,-1,5,4,4,-1,-1,-1]\n",
    "Explanation:\n",
    "- avg[0], avg[1], and avg[2] are -1 because there are less than k elements before each index.\n",
    "- The sum of the subarray centered at index 3 with radius 3 is: 7 + 4 + 3 + 9 + 1 + 8 + 5 = 37.\n",
    "  Using integer division, avg[3] = 37 / 7 = 5.\n",
    "- For the subarray centered at index 4, avg[4] = (4 + 3 + 9 + 1 + 8 + 5 + 2) / 7 = 4.\n",
    "- For the subarray centered at index 5, avg[5] = (3 + 9 + 1 + 8 + 5 + 2 + 6) / 7 = 4.\n",
    "- avg[6], avg[7], and avg[8] are -1 because there are less than k elements after each index.\n",
    "Example 2:\n",
    "\n",
    "Input: nums = [100000], k = 0\n",
    "Output: [100000]\n",
    "Explanation:\n",
    "- The sum of the subarray centered at index 0 with radius 0 is: 100000.\n",
    "  avg[0] = 100000 / 1 = 100000.\n",
    "Example 3:\n",
    "\n",
    "Input: nums = [8], k = 100000\n",
    "Output: [-1]\n",
    "Explanation: \n",
    "- avg[0] is -1 because there are less than k elements before and after index 0.\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def getAverages(nums, k):\n",
    "    \"\"\"\n",
    "    :type nums: List[int]\n",
    "    :type k: int\n",
    "    :rtype: List[int]\n",
    "    \"\"\"\n",
    "\n",
    "    n = len(nums)\n",
    "    avgs = [-1] * n\n",
    "\n",
    "    prefix_sums = [0] * (n + 1)\n",
    "    for i in range(1, n + 1):\n",
    "        prefix_sums[i] = prefix_sums[i - 1] + nums[i - 1]\n",
    "\n",
    "    for i in range(n):\n",
    "        left = max(0, i - k)\n",
    "        right = min(n, i + k + 1)\n",
    "        count = right - left\n",
    "\n",
    "        if count >= 2 * k + 1:\n",
    "            avgs[i] = (prefix_sums[right] - prefix_sums[left]) // count\n",
    "\n",
    "    return avgs\n",
    "\n",
    "\n",
    "\n",
    "nums1 = [7,4,3,9,1,8,5,2,6]\n",
    "k2 = 3\n",
    "\n",
    "nums2 = [8]\n",
    "k2 = 100000\n",
    "\n",
    "nums3 = [100000]\n",
    "k3 = 0\n",
    "\n",
    "print(getAverages(nums1, k1))\n",
    "print(getAverages(nums2, k2))\n",
    "print(getAverages(nums3, k3))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "559d7562",
   "metadata": {},
   "source": [
    "### 1232. Check If It Is a Straight Line\n",
    "**Easy** | `Amazon` `Palantir Technologies`\n",
    "You are given an array coordinates, coordinates `[i]` = `[x, y]`, where `[x, y]` represents the coordinate of a point. Check if these points make a straight line in the XY plane."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "555ecd73",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Input: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]\n",
    "Output: true\n",
    "Example 2:\n",
    "\n",
    "\n",
    "Input: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]\n",
    "Output: false\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "def checkStraightLine(coordinates):\n",
    "        \"\"\"\n",
    "        :type coordinates: List[List[int]]\n",
    "        :rtype: bool\n",
    "        \"\"\"\n",
    "\n",
    "        #calculate the first slope\n",
    "\n",
    "        x0 = coordinates[0][0]\n",
    "        x1 = coordinates[1][0]\n",
    "            \n",
    "        y0 = coordinates[0][1]\n",
    "        y1 = coordinates[1][1]\n",
    "\n",
    "        \n",
    "        #case for zero division - vertical line \n",
    "        zeroD = x1 - x0\n",
    "        if  zeroD == 0:\n",
    "            m1 = -1\n",
    "\n",
    "        else:\n",
    "            m1 = (y1 -y0) /(x1 -x0)\n",
    "\n",
    "        res_list = []\n",
    "\n",
    "        for i in range(len(coordinates) -1):\n",
    "    \n",
    "            x0 = coordinates[i][0]\n",
    "            x1 = coordinates[i+1][0]\n",
    "            \n",
    "            y0 = coordinates[i][1]\n",
    "            y1 = coordinates[i+1][1]\n",
    "\n",
    "\n",
    "            zeroD = x1 - x0\n",
    "\n",
    "            if zeroD ==0:\n",
    "                m = -1\n",
    "            else:\n",
    "                m = (y1 - y0) / (x1 -x0)\n",
    "\n",
    "            res_list.append(m ==m1) \n",
    "\n",
    "        return all(res_list)\n",
    "\n",
    "\n",
    "coordinates1 = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]\n",
    "coordinates2 = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]\n",
    "\n",
    "print(checkStraightLine(coordinates1))\n",
    "print(checkStraightLine(coordinates2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a8c95c5",
   "metadata": {},
   "source": [
    "### 2328. Number of Increasing Paths in a Grid\n",
    "\n",
    "**Hard** | `Adobe`\n",
    "\n",
    "You are given an `m x n` integer matrix grid, where you can move from a cell to any adjacent cell in all `4` directions.\n",
    "\n",
    "Return the number of strictly increasing paths in the grid such that you can start from any cell and end at any cell. Since the answer may be very large, return it modulo `109 + 7`.\n",
    "\n",
    "Two paths are considered different if they do not have exactly the same sequence of visited cells.\n",
    "\n",
    "\n",
    "#### Solution \n",
    "\n",
    "#### Intuition:\n",
    "\n",
    "The problem asks for the `number of strictly increasing paths` in a grid, where you can move from a cell to any adjacent cell in all four directions. The goal is to `find the count of such paths` from any starting cell to any ending cell.\n",
    "\n",
    "#### Approach:\n",
    "\n",
    "Using a`depth-first search (DFS)` with `memoization` to count the number of strictly increasing paths. It defines a recursive function dfs that takes the current cell indices as parameters. \n",
    "\n",
    "1. Initialize the dimensions of the grid, m and n, and the modulo value, mod.\n",
    "\n",
    "2. Create a 2D dp matrix of size m x n and initialize all its values to 0. This matrix will store the counts of strictly increasing paths for each cell.\n",
    "\n",
    "3. Define a recursive function, dfs, that takes the current cell indices (i and j) as parameters and returns the count of strictly increasing paths from that cell.\n",
    "\n",
    "4. Within the dfs function:\n",
    "\n",
    "     - Check if the count for the current cell is already calculated and stored in the dp matrix. If so, return the stored count.\n",
    "\n",
    "     - Otherwise, initialize the count as 1, since the current cell itself is a valid path.\n",
    "\n",
    "5. Explore all four neighboring cells (up, down, left, and right) from the current cell:\n",
    "\n",
    "     - For each neighbor, check if it is within the grid boundaries (0 <= x < m and 0 <= y < n) and if its value is greater than the value of the current cell.\n",
    "\n",
    "    - If the conditions are met, recursively call the dfs function for the neighboring cell and add the returned count to the current count.\n",
    "    \n",
    "6. After calculating the count for the current cell, store it in the dp matrix at the corresponding indices.\n",
    "\n",
    "7. Return the count for the current cell.\n",
    "\n",
    "8. In the main function, initialize totalPaths as 0, which will store the total count of strictly increasing paths.\n",
    "\n",
    "9. Iterate over all cells in the grid using nested loops:\n",
    "\n",
    "    - For each cell, call the dfs function to calculate the count of strictly increasing paths starting from that cell.\n",
    "    - Add the returned count to the totalPaths variable, taking the modulo (mod) at each step.\n",
    "    \n",
    "10. Finally, return the totalPaths, which represents the total number of strictly increasing paths in the grid.\n",
    "\n",
    "#### Complexity:\n",
    "\n",
    "Time complexity: The code visits each cell in the grid once and performs a constant amount of work for each cell. Therefore, the time complexity is `O(m * n)`, where m is the number of rows and n is the number of columns in the grid.\n",
    "\n",
    "Space complexity: The code uses an additional dp matrix of size `m x n` to store the counts for each cell. Therefore, the space complexity is `O(m * n)`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "08930b9b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Input: grid = [[1,1],[3,4]]\n",
    "Output: 8\n",
    "Explanation: The strictly increasing paths are:\n",
    "- Paths with length 1: [1], [1], [3], [4].\n",
    "- Paths with length 2: [1 -> 3], [1 -> 4], [3 -> 4].\n",
    "- Paths with length 3: [1 -> 3 -> 4].\n",
    "The total number of paths is 4 + 3 + 1 = 8.\n",
    "Example 2:\n",
    "\n",
    "Input: grid = [[1],[2]]\n",
    "Output: 3\n",
    "Explanation: The strictly increasing paths are:\n",
    "- Paths with length 1: [1], [2].\n",
    "- Paths with length 2: [1 -> 2].\n",
    "The total number of paths is 2 + 1 = 3.\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def countPaths(grid):\n",
    "    \"\"\"\n",
    "    :type grid: List[List[int]]\n",
    "    :rtype: int\n",
    "    \"\"\"\n",
    "\n",
    "    m, n = len(grid), len(grid[0])\n",
    "    mod = int(1e9) + 7\n",
    "\n",
    "    dp = [[0] * n for _ in range(m)]\n",
    "\n",
    "    def dfs(i, j):\n",
    "        if dp[i][j] != 0:\n",
    "            return dp[i][j]\n",
    "\n",
    "        count = 1\n",
    "\n",
    "        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n",
    "            x, y = i + dx, j + dy\n",
    "            if 0 <= x < m and 0 <= y < n and grid[x][y] > grid[i][j]:\n",
    "                count = (count + dfs(x, y)) % mod\n",
    "\n",
    "        dp[i][j] = count\n",
    "        return count\n",
    "\n",
    "    totalPaths = 0\n",
    "\n",
    "    for i in range(m):\n",
    "        for j in range(n):\n",
    "            totalPaths = (totalPaths + dfs(i, j)) % mod\n",
    "\n",
    "    return totalPaths\n",
    "\n",
    "\n",
    "grid1 = [[1,1],[3,4]]\n",
    "grid2 = [[1],[2]]\n",
    "\n",
    "print(countPaths(grid1))\n",
    "print(countPaths(grid2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "778f9a7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.656612873077393e-10"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = 2**-31\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "88ee299b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-321\n"
     ]
    }
   ],
   "source": [
    "x = -123\n",
    "\n",
    "if x > 0:\n",
    "    \n",
    "    y = str(x)[::-1]\n",
    "    \n",
    "    print(int(y))\n",
    "    \n",
    "elif x < 0:\n",
    "    \n",
    "    y = str(x*-1)[::-1]\n",
    "    print(int(y)*-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c46479b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
