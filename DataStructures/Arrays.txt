{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "489314a4",
   "metadata": {},
   "source": [
    "# [Arrays](https://leetcode.com/tag/array/ )\n",
    "\n",
    " \n",
    " #### 1920. Build Array from Permutation\n",
    "Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.\n",
    "\n",
    "A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "9028a440",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 2, 4, 5, 3]\n",
      "[4, 5, 0, 1, 2, 3]\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: nums = [0,2,1,5,3,4]\n",
    "Output: [0,1,2,4,5,3]\n",
    "\n",
    "Explanation: The array ans is built as follows: \n",
    "ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]\n",
    "    = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]\n",
    "    = [0,1,2,4,5,3]\n",
    "\n",
    "Example 2:\n",
    "\n",
    "Input: nums = [5,0,1,2,3,4]\n",
    "Output: [4,5,0,1,2,3]\n",
    "Explanation: The array ans is built as follows:\n",
    "ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]\n",
    "    = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]\n",
    "    = [4,5,0,1,2,3]\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "class BuildArray(object):\n",
    "    def buildArray(self, nums):\n",
    "        \"\"\"\n",
    "        :type nums: List[int]\n",
    "        :rtype: List[int]\n",
    "        \"\"\"\n",
    "        new_list = []\n",
    "        for i in range(len(nums)):\n",
    "            new_list.append(nums[nums[i]])\n",
    "            \n",
    "        return new_list\n",
    "            \n",
    "        \n",
    "nums_1 = [0,2,1,5,3,4]  \n",
    "nums_2 = [5,0,1,2,3,4]\n",
    "\n",
    "buildArr = BuildArray()\n",
    "\n",
    "print(buildArr.buildArray(nums_1))\n",
    "print(buildArr.buildArray(nums_2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ef00042",
   "metadata": {},
   "source": [
    "#### 1929. Concatenation of Array\n",
    "\n",
    "Given an integer array nums of length n, you want to create an array ans of length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed).\n",
    "\n",
    "Specifically, ans is the concatenation of two nums arrays.\n",
    "\n",
    "Return the array ans."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "d2ff4205",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 1, 1, 2, 1]\n",
      "[1, 3, 2, 1, 1, 3, 2, 1]\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: nums = [1,2,1]\n",
    "Output: [1,2,1,1,2,1]\n",
    "\n",
    "Explanation: The array ans is formed as follows:\n",
    "- ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]\n",
    "- ans = [1,2,1,1,2,1]\n",
    "Example 2:\n",
    "\n",
    "Input: nums = [1,3,2,1]\n",
    "Output: [1,3,2,1,1,3,2,1]\n",
    "\n",
    "Explanation: The array ans is formed as follows:\n",
    "- ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]\n",
    "- ans = [1,3,2,1,1,3,2,1]\n",
    " \n",
    "\n",
    "Constraints:\n",
    "\n",
    "n == nums.length\n",
    "1 <= n <= 1000\n",
    "1 <= nums[i] <= 1000\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "class GetConcatenation(object):\n",
    "    def getConcatenation(self, nums):\n",
    "        \"\"\"\n",
    "        :type nums: List[int]\n",
    "        :rtype: List[int]\n",
    "        \"\"\"\n",
    "        result = nums + nums \n",
    "        return result\n",
    "    \n",
    "    \n",
    "nums_1 = [1,2,1]\n",
    "nums_2 = [1,3,2,1]\n",
    "\n",
    "\n",
    "getConcatObj = GetConcatenation()\n",
    "print(getConcatObj.getConcatenation(nums_1))\n",
    "print(getConcatObj.getConcatenation(nums_2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "126b3221",
   "metadata": {},
   "source": [
    "#### 1470. Shuffle the Array\n",
    "\n",
    "Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].\n",
    "\n",
    "Return the array in the form [x1,y1,x2,y2,...,xn,yn]."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "978687a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 3, 5, 4, 1, 7]\n",
      "[1, 4, 2, 3, 3, 2, 4, 1]\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: nums = [2,5,1,3,4,7], n = 3\n",
    "Output: [2,3,5,4,1,7] \n",
    "Explanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].\n",
    "\n",
    "\n",
    "\n",
    "Example 2:\n",
    "\n",
    "Input: nums = [1,2,3,4,4,3,2,1], n = 4\n",
    "Output: [1,4,2,3,3,2,4,1]\n",
    "Example 3:\n",
    "\n",
    "Input: nums = [1,1,2,2], n = 2\n",
    "Output: [1,2,1,2]\n",
    " \n",
    "\n",
    "Constraints:\n",
    "\n",
    "1 <= n <= 500\n",
    "nums.length == 2n\n",
    "1 <= nums[i] <= 10^3\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "#two pointer technique \n",
    "\n",
    "\n",
    "def shuffle(nums, n):\n",
    "        \"\"\"\n",
    "        :type nums: List[int]\n",
    "        :rtype: List[int]\n",
    "        \"\"\"\n",
    "        \n",
    "        #two pointers\n",
    "        \n",
    "        \n",
    "        halfway = n\n",
    "        \n",
    "        shuffled_list = []\n",
    "        for i in range(halfway):\n",
    "            #print(i)\n",
    "            shuffled_list.append(nums[i])\n",
    "            shuffled_list.append(nums[i+halfway])\n",
    "        \n",
    "        return shuffled_list\n",
    "            \n",
    "\n",
    "        \n",
    "# 0 1 2 3 4 5 \n",
    "# 0 (3) 1 (4) 2 (5)  => 0, 0+3, 1, 1+3, 2, 2+3 \n",
    "\n",
    "nums_1 = [2,5,1,3,4,7]      #n1 = 3\n",
    "nums_2 = [1,2,3,4,4,3,2,1]  #n2 = 4\n",
    "\n",
    "print(shuffle(nums_1, 3))\n",
    "print(shuffle(nums_2, 4))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fdee035",
   "metadata": {},
   "source": [
    "#### 2011. Final Value of Variable After Performing Operations\n",
    "\n",
    "There is a programming language with only four operations and one variable X:\n",
    "\n",
    "++X and X++ increments the value of the variable X by 1.\n",
    "--X and X-- decrements the value of the variable X by 1.\n",
    "Initially, the value of X is 0.\n",
    "\n",
    "Given an array of strings operations containing a list of operations, return the final value of X after performing all the operations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "67c30c9a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "print solution 1\n",
      "1\n",
      "3\n",
      "0\n",
      "\n",
      "print solution 2\n",
      "1\n",
      "3\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: operations = [\"--X\",\"X++\",\"X++\"]\n",
    "Output: 1\n",
    "Explanation: The operations are performed as follows:\n",
    "Initially, X = 0.\n",
    "--X: X is decremented by 1, X =  0 - 1 = -1.\n",
    "X++: X is incremented by 1, X = -1 + 1 =  0.\n",
    "X++: X is incremented by 1, X =  0 + 1 =  1.\n",
    "Example 2:\n",
    "\n",
    "Input: operations = [\"++X\",\"++X\",\"X++\"]\n",
    "Output: 3\n",
    "Explanation: The operations are performed as follows:\n",
    "Initially, X = 0.\n",
    "++X: X is incremented by 1, X = 0 + 1 = 1.\n",
    "++X: X is incremented by 1, X = 1 + 1 = 2.\n",
    "X++: X is incremented by 1, X = 2 + 1 = 3.\n",
    "Example 3:\n",
    "\n",
    "Input: operations = [\"X++\",\"++X\",\"--X\",\"X--\"]\n",
    "Output: 0\n",
    "Explanation: The operations are performed as follows:\n",
    "Initially, X = 0.\n",
    "X++: X is incremented by 1, X = 0 + 1 = 1.\n",
    "++X: X is incremented by 1, X = 1 + 1 = 2.\n",
    "--X: X is decremented by 1, X = 2 - 1 = 1.\n",
    "X--: X is decremented by 1, X = 1 - 1 = 0.\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def finalValueAfterOperations(operations):\n",
    "    \"\"\"\n",
    "    :type operations: List[str]\n",
    "    :rtype: int\n",
    "    \"\"\"\n",
    "    \n",
    "    #X = 0\n",
    "    \n",
    "    ans = \"\".join(operations)\n",
    "    \n",
    "    result = ans.count(\"++\") - ans.count(\"--\")\n",
    "    \n",
    "    return result\n",
    "\n",
    "\n",
    "def finalValueAfterOperations_2(operations):\n",
    "    \"\"\"\n",
    "    :type operations: List[str]\n",
    "    :rtype: int\n",
    "    \"\"\"\n",
    "    \n",
    "    # init x\n",
    "    x = 0\n",
    "    \n",
    "    for i in operations:\n",
    "        \n",
    "        if i == \"--X\": \n",
    "            x = x-1\n",
    "            \n",
    "        elif i ==\"X--\":\n",
    "            x = x-1\n",
    "            \n",
    "        elif i ==\"++X\": \n",
    "            x = x+1\n",
    "        else:           \n",
    "            x = x+1\n",
    "            \n",
    "    return x\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "operations_1 = [\"--X\",\"X++\",\"X++\"]\n",
    "operations_2 = [\"++X\",\"++X\",\"X++\"]\n",
    "operations_3 = [\"X++\",\"++X\",\"--X\",\"X--\"]\n",
    "\n",
    "\n",
    "print(\"print solution 1\")\n",
    "print(finalValueAfterOperations(operations_1))\n",
    "print(finalValueAfterOperations(operations_2))\n",
    "print(finalValueAfterOperations(operations_3))\n",
    "print()\n",
    "\n",
    "print(\"print solution 2\")\n",
    "print(finalValueAfterOperations_2(operations_1))\n",
    "print(finalValueAfterOperations_2(operations_2))\n",
    "print(finalValueAfterOperations_2(operations_3))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4344617",
   "metadata": {},
   "source": [
    "#### 1512. Number of Good Pairs\n",
    "\n",
    "Given an array of integers nums, return the number of good pairs.\n",
    "\n",
    "A pair (i, j) is called good if nums[i] == nums[j] and i < j.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "afc41f63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "6\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: nums = [1,2,3,1,1,3]\n",
    "Output: 4\n",
    "Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\n",
    "Example 2:\n",
    "\n",
    "Input: nums = [1,1,1,1]\n",
    "Output: 6\n",
    "Explanation: Each pair in the array are good.\n",
    "Example 3:\n",
    "\n",
    "Input: nums = [1,2,3]\n",
    "Output: 0\n",
    " \n",
    "\n",
    "Constraints:\n",
    "\n",
    "1 <= nums.length <= 100\n",
    "1 <= nums[i] <= 100\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "\"\"\" O(n^2) solution \"\"\"\n",
    "\n",
    "class NumGoodPairs(object):\n",
    "    \n",
    "    def numIdenticalPairs(self, nums):\n",
    "        \"\"\"\n",
    "        :type nums: List[int]\n",
    "        :rtype: int\n",
    "        \"\"\"\n",
    "        \n",
    "        i = j = count = 0\n",
    "        \n",
    "        for i in range(len(nums)):\n",
    "            for j in range(len(nums)):\n",
    "                \n",
    "                if (nums[i] == nums[j] ) & (i < j):\n",
    "                    \n",
    "                    count +=1\n",
    "        \n",
    "        return count\n",
    "\n",
    "\n",
    "    \n",
    "nums1 = [1,2,3,1,1,3] \n",
    "nums2 = [1,1,1,1]\n",
    "nums3 = [1,2,3]\n",
    "    \n",
    "gpObj = NumGoodPairs()\n",
    "\n",
    "print(gpObj.numIdenticalPairs(nums1))\n",
    "print(gpObj.numIdenticalPairs(nums2))\n",
    "print(gpObj.numIdenticalPairs(nums3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "c46b4ecc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "Simple O(n) Solution\n",
    "\n",
    "The idea is storing the number of repeated elements \n",
    "in a dictionary/hash table and using mathmatics to \n",
    "calculate the number of combinations.\n",
    "\n",
    "\n",
    "pseudo:\n",
    "\n",
    "Dictionary/Hash Table to store the number of times an element is repeated\n",
    "Record total number of pairs (num)\n",
    "Iterate through the nums list\n",
    "Check to see if each element has already been seen, if not add it to the Hash Table\n",
    "If it has been seen, but only once, just add 1 to \"num\"\n",
    "If it has been seen, multiple times. Add the number of repeated times to \"num\"\n",
    "Increment the number of reapeated times by 1.\n",
    "Move onto next element\n",
    "\"\"\"\n",
    "\n",
    "class NumIdenticalPairs(object):\n",
    "\n",
    "    def numIdenticalPairs(self, nums) -> int:\n",
    "\n",
    "            # number of good pairs\n",
    "            repeat = {}\n",
    "            num = 0\n",
    "\n",
    "            # for every element in nums\n",
    "            for i in nums:\n",
    "\n",
    "                # number of repeated digits\n",
    "                if i in repeat:\n",
    "\n",
    "                    # count number of pairs based on duplicate values\n",
    "                    if repeat[i] == 1:\n",
    "                        num += 1\n",
    "                    else:\n",
    "                        num += repeat[i]\n",
    "\n",
    "                    # increment the number of counts\n",
    "                    repeat[i] += 1\n",
    "                # number has not been seen before\n",
    "                else:\n",
    "                    repeat[i] = 1\n",
    "            # return\n",
    "            return num\n",
    "        \n",
    "nums1 = [1,2,3]\n",
    "        \n",
    "numPairsO = NumIdenticalPairs()\n",
    "numPairsO.numIdenticalPairs(nums1)\n",
    "\n",
    "print(numPairsO.numIdenticalPairs(nums1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e28c23a",
   "metadata": {},
   "source": [
    "#### 1431. Kids With the Greatest Number of Candies\n",
    "\n",
    "There are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extraCandies, denoting the number of extra candies that you have.\n",
    "\n",
    "Return a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extraCandies, they will have the greatest number of candies among all the kids, or false otherwise.\n",
    "\n",
    "Note that multiple kids can have the greatest number of candies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "e496b16f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[True, True, True, False, True]\n",
      "[True, False, False, False, False]\n",
      "[True, False, True]\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: candies = [2,3,5,1,3], extraCandies = 3\n",
    "Output: [true,true,true,false,true] \n",
    "Explanation: If you give all extraCandies to:\n",
    "- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.\n",
    "- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n",
    "- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.\n",
    "- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.\n",
    "- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n",
    "Example 2:\n",
    "\n",
    "Input: candies = [4,2,1,1,2], extraCandies = 1\n",
    "Output: [true,false,false,false,false] \n",
    "Explanation: There is only 1 extra candy.\n",
    "Kid 1 will always have the greatest number of candies, even if a different kid is given the extra candy.\n",
    "Example 3:\n",
    "\n",
    "Input: candies = [12,1,12], extraCandies = 10\n",
    "Output: [true,false,true]\n",
    " \n",
    "\n",
    "Constraints:\n",
    "\n",
    "n == candies.length\n",
    "2 <= n <= 100\n",
    "1 <= candies[i] <= 100\n",
    "1 <= extraCandies <= 50\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "def kidsWithGreatestCandies(candies_list, extraCandies):\n",
    "    \n",
    "    bool_list = []\n",
    "    \n",
    "    max_ = max(candies_list)\n",
    "    \n",
    "    for i in candies_list:\n",
    "        \n",
    "        if (i + extraCandies >= max_):\n",
    "            bool_list.append(True)\n",
    "            \n",
    "        else:\n",
    "            bool_list.append(False)\n",
    "        \n",
    "    #print(bool_list)\n",
    "    return bool_list\n",
    "            \n",
    "candies1 = [2,3,5,1,3]\n",
    "extraCandies1 = 3  \n",
    "\n",
    "candies2 = [4,2,1,1,2]\n",
    "extraCandies2 = 1\n",
    "\n",
    "candies3 = [12,1,12]\n",
    "extraCandies3 = 10\n",
    "\n",
    "\n",
    "        \n",
    "print(kidsWithGreatestCandies(candies1, extraCandies1) )\n",
    "print(kidsWithGreatestCandies(candies2, extraCandies2) )\n",
    "print(kidsWithGreatestCandies(candies3, extraCandies3) )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13599733",
   "metadata": {},
   "source": [
    "#### 2574. Left and Right Sum Differences\n",
    "\n",
    "Given a 0-indexed integer array nums, find a 0-indexed integer array answer where:\n",
    "\n",
    "answer.length == nums.length.\n",
    "answer[i] = |leftSum[i] - rightSum[i]|.\n",
    "Where:\n",
    "\n",
    "leftSum[i] is the sum of elements to the left of the index i in the array nums. If there is no such element, leftSum[i] = 0.\n",
    "rightSum[i] is the sum of elements to the right of the index i in the array nums. If there is no such element, rightSum[i] = 0.\n",
    "Return the array answer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "222daf44",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[15, 1, 11, 22]\n",
      "[0]\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: nums = [10,4,8,3]\n",
    "Output: [15,1,11,22]\n",
    "Explanation: The array leftSum is [0,10,14,22] and the array rightSum is [15,11,3,0].\n",
    "The array answer is [|0 - 15|,|10 - 11|,|14 - 3|,|22 - 0|] = [15,1,11,22].\n",
    "Example 2:\n",
    "\n",
    "Input: nums = [1]\n",
    "Output: [0]\n",
    "Explanation: The array leftSum is [0] and the array rightSum is [0].\n",
    "The array answer is [|0 - 0|] = [0].\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "\n",
    "def leftRightDifference(nums):\n",
    "    \"\"\"\n",
    "    :type nums: List[int]\n",
    "    :rtype: List[int]\n",
    "    \"\"\"\n",
    "\n",
    "    #initialize \n",
    "    lefSum = [0,]\n",
    "    rigSum = [0,]\n",
    "    difference = []\n",
    "\n",
    "    #duplicate nums for use to find rightSum\n",
    "    numsCopy = list(nums)\n",
    "    \n",
    "    \n",
    "    for i in range(len(nums)):\n",
    "\n",
    "        #codition - find sums until length(nums) -1, bcz we have initialized\n",
    "        if i < len(nums)-1:\n",
    "\n",
    "            #leftsum\n",
    "            leftCurrent = nums[0:i+1]\n",
    "            lefSum.append(sum(leftCurrent))\n",
    "\n",
    "\n",
    "            #rightSum\n",
    "            #delete the first element on each loop\n",
    "            numsCopy.pop(0)\n",
    "\n",
    "            #update rightCurrent\n",
    "            rightCurrent = numsCopy\n",
    "\n",
    "            #insert the right sum at the beginning of the rightSum \n",
    "            rigSum.insert(i, sum(rightCurrent))\n",
    "\n",
    "            \n",
    "        # finally find the difference \n",
    "        difference.append( abs(lefSum[i] - rigSum[i]))\n",
    "\n",
    "        \n",
    "    return difference\n",
    "    \n",
    "\n",
    "    \n",
    "nums1 = [10,4,8,3]\n",
    "nums2 = [1]\n",
    "\n",
    "\n",
    "print(leftRightDifference(nums1))\n",
    "print(leftRightDifference(nums2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d944da3f",
   "metadata": {},
   "source": [
    "#### 1672. Richest Customer Wealth\n",
    "\n",
    "You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank. Return the wealth that the richest customer has.\n",
    "\n",
    "A customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "69e98cf8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n",
      "10\n",
      "17\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: accounts = [[1,2,3],[3,2,1]]\n",
    "Output: 6\n",
    "Explanation:\n",
    "1st customer has wealth = 1 + 2 + 3 = 6\n",
    "2nd customer has wealth = 3 + 2 + 1 = 6\n",
    "Both customers are considered the richest with a wealth of 6 each, so return 6.\n",
    "Example 2:\n",
    "\n",
    "Input: accounts = [[1,5],[7,3],[3,5]]\n",
    "Output: 10\n",
    "Explanation: \n",
    "1st customer has wealth = 6\n",
    "2nd customer has wealth = 10 \n",
    "3rd customer has wealth = 8\n",
    "The 2nd customer is the richest with a wealth of 10.\n",
    "Example 3:\n",
    "\n",
    "Input: accounts = [[2,8,7],[7,1,3],[1,9,5]]\n",
    "Output: 17\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "def theRichest(accounts_):\n",
    "    \n",
    "    currentMax = 0\n",
    "    \n",
    "    for vals in accounts_:\n",
    "        \n",
    "        if (sum(vals) >= currentMax):\n",
    "            currentMax = sum(vals)\n",
    "        else:\n",
    "            pass\n",
    "        \n",
    "    return currentMax\n",
    "            \n",
    "accounts1 = [[1,2,3],[3,2,1]]       \n",
    "accounts2 = [[1,5],[7,3],[3,5]]   \n",
    "accounts3 =[[2,8,7],[7,1,3],[1,9,5]]\n",
    "\n",
    "print(theRichest(accounts1))\n",
    "print(theRichest(accounts2))\n",
    "print(theRichest(accounts3))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daaed489",
   "metadata": {},
   "source": [
    "#### 1480. Running Sum of 1d Array\n",
    "\n",
    "Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]).\n",
    "\n",
    "Return the running sum of nums."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "b67d6395",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 6, 10]\n",
      "[1, 2, 3, 4, 5]\n",
      "[3, 4, 6, 16, 17]\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: nums = [1,2,3,4]\n",
    "Output: [1,3,6,10]\n",
    "Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].\n",
    "Example 2:\n",
    "\n",
    "Input: nums = [1,1,1,1,1]\n",
    "Output: [1,2,3,4,5]\n",
    "Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].\n",
    "Example 3:\n",
    "\n",
    "Input: nums = [3,1,2,10,1]\n",
    "Output: [3,4,6,16,17]\n",
    " \n",
    "\n",
    "Constraints:\n",
    "\n",
    "1 <= nums.length <= 1000\n",
    "-10^6 <= nums[i] <= 10^6\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def runningSum(nums):\n",
    "    \n",
    "    run_sum = []\n",
    "    \n",
    "    for i in range(len(nums)):\n",
    "        \n",
    "        run_sum.append(sum(nums[0:i+1]))\n",
    "        \n",
    "        \n",
    "    return run_sum \n",
    "\n",
    "\n",
    "#fast solution\n",
    "def runningSum2(nums):\n",
    "    \n",
    "    for i in range(1,len(nums)):\n",
    "        nums[i] += nums[i-1]\n",
    "        \n",
    "    return nums \n",
    "\n",
    "\n",
    "\n",
    "nums1 = [1,2,3,4]\n",
    "nums2 = [1,1,1,1,1]\n",
    "nums3 = [3,1,2,10,1]\n",
    "\n",
    "print(runningSum(nums1))\n",
    "print(runningSum(nums2))\n",
    "print(runningSum(nums3))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0b863cc",
   "metadata": {},
   "source": [
    "#### 2114. Maximum Number of Words Found in Sentences\n",
    "\n",
    "A sentence is a list of words that are separated by a single space with no leading or trailing spaces.\n",
    "You are given an array of strings sentences, where each sentences[i] represents a single sentence.\n",
    "Return the maximum number of words that appear in a single sentence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "2f66e17d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: sentences = [\"alice and bob love leetcode\", \"i think so too\", \"this is great thanks very much\"]\n",
    "Output: 6\n",
    "Explanation: \n",
    "- The first sentence, \"alice and bob love leetcode\", has 5 words in total.\n",
    "- The second sentence, \"i think so too\", has 4 words in total.\n",
    "- The third sentence, \"this is great thanks very much\", has 6 words in total.\n",
    "Thus, the maximum number of words in a single sentence comes from the third sentence, which has 6 words.\n",
    "Example 2:\n",
    "\n",
    "Input: sentences = [\"please wait\", \"continue to fight\", \"continue to win\"]\n",
    "Output: 3\n",
    "Explanation: It is possible that multiple sentences contain the same number of words. \n",
    "In this example, the second and third sentences (underlined) have the same number of words.\n",
    " \n",
    "\n",
    "Constraints:\n",
    "\n",
    "1 <= sentences.length <= 100\n",
    "1 <= sentences[i].length <= 100\n",
    "sentences[i] consists only of lowercase English letters and ' ' only.\n",
    "sentences[i] does not have leading or trailing spaces.\n",
    "All the words in sentences[i] are separated by a single space.\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def mostWordsFound(sent):\n",
    "    \n",
    "    countwords = 0\n",
    "    \n",
    "    for s in sent:\n",
    "        \n",
    "        words = s.split()\n",
    "        \n",
    "        #clean trainling space and lowercase it\n",
    "        words_clean = [w.lower().strip(\" \") for w in words]\n",
    "        \n",
    "        \n",
    "        # find max number of words\n",
    "        if len(words_clean) > countwords:\n",
    "            countwords = len(words_clean)\n",
    "                \n",
    "    return countwords\n",
    "\n",
    "\n",
    "# fastest solution ( not necessarily good solution)\n",
    "\n",
    "def mostWordsFound2(sentences):\n",
    "    maximum = 0\n",
    "    for a in sentences:\n",
    "        b = a.count(\" \")\n",
    "        b += 1\n",
    "        if b > maximum:\n",
    "            maximum = b\n",
    "    return maximum\n",
    "        \n",
    "    \n",
    "\n",
    "sentence1 = [\"alice and bob love leetcode \", \"i think so too\", \"this is great thanks very much\"]\n",
    "sentence2 = [\"please wait\", \"continue to fight\", \"continue to win\"]\n",
    "\n",
    "\n",
    "print(mostWordsFound(sentence1))\n",
    "print(mostWordsFound(sentence2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86c2b6d4",
   "metadata": {},
   "source": [
    "#### 1365. How Many Numbers Are Smaller Than the Current Number\n",
    "\n",
    "Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].\n",
    "\n",
    "Return the answer in an array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "2442e692",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4, 0, 1, 1, 3]\n",
      "[2, 1, 0, 3]\n",
      "[0, 0, 0, 0]\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: nums = [8,1,2,2,3]\n",
    "Output: [4,0,1,1,3]\n",
    "Explanation: \n",
    "For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). \n",
    "For nums[1]=1 does not exist any smaller number than it.\n",
    "For nums[2]=2 there exist one smaller number than it (1). \n",
    "For nums[3]=2 there exist one smaller number than it (1). \n",
    "For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).\n",
    "Example 2:\n",
    "\n",
    "Input: nums = [6,5,4,8]\n",
    "Output: [2,1,0,3]\n",
    "Example 3:\n",
    "\n",
    "Input: nums = [7,7,7,7]\n",
    "Output: [0,0,0,0]\n",
    " \n",
    "\n",
    "Constraints:\n",
    "\n",
    "2 <= nums.length <= 500\n",
    "0 <= nums[i] <= 100\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "\n",
    "def smallerNumbersThanCurrent(nums):\n",
    "    \n",
    "    result_ = []\n",
    "    \n",
    "    for value in nums:\n",
    "        \n",
    "        # returns list of booleans - True whenever value is garter\n",
    "        \n",
    "        boolean_list = [ True if value > v else False for v in nums]\n",
    "        \n",
    "        numsGraterAtCurrentIndex = sum(boolean_list)\n",
    "\n",
    "        result_.append(numsGraterAtCurrentIndex)\n",
    "        \n",
    "        \n",
    "    return result_\n",
    "\n",
    "\n",
    "\n",
    "nums = [8,1,2,2,3]\n",
    "nums2 = [6,5,4,8]\n",
    "nums3 = [7,7,7,7]\n",
    "        \n",
    "print(smallerNumbersThanCurrent(nums))       \n",
    "print(smallerNumbersThanCurrent(nums2))\n",
    "print(smallerNumbersThanCurrent(nums3))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f4cd93a",
   "metadata": {},
   "source": [
    "#### 1389. Create Target Array in the Given Order\n",
    "\n",
    "Given two arrays of integers nums and index. Your task is to create target array under the following rules:\n",
    "\n",
    "Initially target array is empty.\n",
    "From left to right read nums[i] and index[i], insert at index index[i] the value nums[i] in target array.\n",
    "Repeat the previous step until there are no elements to read in nums and index.\n",
    "Return the target array.\n",
    "\n",
    "It is guaranteed that the insertion operations will be valid."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "d007f066",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 4, 1, 3, 2]\n",
      "[0, 1, 2, 3, 4]\n",
      "[1]\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: nums = [0,1,2,3,4], index = [0,1,2,2,1]\n",
    "Output: [0,4,1,3,2]\n",
    "Explanation:\n",
    "nums       index     target\n",
    "0            0        [0]\n",
    "1            1        [0,1]\n",
    "2            2        [0,1,2]\n",
    "3            2        [0,1,3,2]\n",
    "4            1        [0,4,1,3,2]\n",
    "Example 2:\n",
    "\n",
    "Input: nums = [1,2,3,4,0], index = [0,1,2,3,0]\n",
    "Output: [0,1,2,3,4]\n",
    "Explanation:\n",
    "nums       index     target\n",
    "1            0        [1]\n",
    "2            1        [1,2]\n",
    "3            2        [1,2,3]\n",
    "4            3        [1,2,3,4]\n",
    "0            0        [0,1,2,3,4]\n",
    "Example 3:\n",
    "\n",
    "Input: nums = [1], index = [0]\n",
    "Output: [1]\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "def createTargetArray(nums, index):\n",
    "    \"\"\"\n",
    "    :type nums: List[int]\n",
    "    :type index: List[int]\n",
    "    :rtype: List[int]\n",
    "    \"\"\"\n",
    "        \n",
    "    target = []\n",
    "    for i, n in zip(index, nums):\n",
    "        target.insert(i, n)\n",
    "    return target\n",
    "\n",
    "\n",
    "\n",
    "nums1 = [0,1,2,3,4]\n",
    "index1 = [0,1,2,2,1]\n",
    "\n",
    "nums2 = [1,2,3,4,0]\n",
    "index2 = [0,1,2,3,0]\n",
    "\n",
    "nums3 = [1]\n",
    "index3 = [0]\n",
    "\n",
    "\n",
    "print(createTargetArray(nums1, index1))\n",
    "print(createTargetArray(nums2, index2))\n",
    "print(createTargetArray(nums3, index3))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce07c8dc",
   "metadata": {},
   "source": [
    "#### 1528. Shuffle String\n",
    "\n",
    "You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.\n",
    "\n",
    "Return the shuffled string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "96faeeb8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "leetcode\n",
      "abc\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "\n",
    "Example 1:\n",
    "Input: s = \"codeleet\", indices = [4,5,6,7,0,2,1,3]\n",
    "Output: \"leetcode\"\n",
    "Explanation: As shown, \"codeleet\" becomes \"leetcode\" after shuffling.\n",
    "\n",
    "Example 2:\n",
    "Input: s = \"abc\", indices = [0,1,2]\n",
    "Output: \"abc\"\n",
    "Explanation: After shuffling, each character remains in its position.\n",
    " \n",
    "\n",
    "Constraints:\n",
    "\n",
    "s.length == indices.length == n\n",
    "1 <= n <= 100\n",
    "s consists of only lowercase English letters.\n",
    "0 <= indices[i] < n\n",
    "All values of indices are unique.\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "def restoreString(s, indices):\n",
    "    \"\"\"\n",
    "    :type s: str\n",
    "    :type indices: List[int]\n",
    "    :rtype: str\n",
    "    \"\"\"\n",
    "\n",
    "    str_lst = list(s)\n",
    "\n",
    "    for i, s in zip(indices, list(s)):\n",
    "        str_lst[i] = s\n",
    "\n",
    "    return \"\".join(str_lst)\n",
    "\n",
    "s1 = \"codeleet\"\n",
    "indices1 = [4,5,6,7,0,2,1,3]\n",
    "\n",
    "\n",
    "s2 = \"abc\"\n",
    "indices2 = [0,1,2]\n",
    "\n",
    "print(restoreString(s1, indices1))\n",
    "print(restoreString(s2, indices2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9c4e51c",
   "metadata": {},
   "source": [
    "#### 1547. Minimum Cost to Cut a Stick (Cost Minimization problem)\n",
    "\n",
    "Given a wooden stick of length n units. The stick is labelled from 0 to n. For example, a stick of length 6 is labelled as follows:\n",
    "\n",
    "\n",
    "Given an integer array cuts where cuts[i] denotes a position you should perform a cut at.\n",
    "\n",
    "You should perform the cuts in order, you can change the order of the cuts as you wish.\n",
    "\n",
    "The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\n",
    "\n",
    "Return the minimum total cost of the cuts.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "c38dadf1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 2, 3, 4, 5, 6, 7]\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Input: n = 7, cuts = [1,3,4,5]\n",
    "Output: 16\n",
    "Explanation: Using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario:\n",
    "\n",
    "The first cut is done to a rod of length 7 so the cost is 7. \n",
    "\n",
    "The second cut is done to a rod of length 6 (i.e. the second part of the first cut), \n",
    "the third is done to a rod of length 4 and the last cut is to a rod of length 3. \n",
    "The total cost is 7 + 6 + 4 + 3 = 20.\n",
    "\n",
    "Rearranging the cuts to be [3, 5, 1, 4] for example will lead to \n",
    "a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16).\n",
    "\n",
    "Example 2:\n",
    "\n",
    "Input: n = 9, cuts = [5,6,1,4,2]\n",
    "Output: 22\n",
    "Explanation: If you try the given cuts ordering the cost will be 25.\n",
    "There are much ordering with total cost <= 25, for example, the order [4, 6, 5, 2, 1] has total cost = 22 which is the minimum possible.\n",
    " \n",
    "\n",
    "Constraints:\n",
    "\n",
    "2 <= n <= 106\n",
    "1 <= cuts.length <= min(n - 1, 100)\n",
    "1 <= cuts[i] <= n - 1\n",
    "All the integers in cuts array are distinct.\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "n = 7\n",
    "\n",
    "len_ = [i for i in range(n+1)]\n",
    "cuts = [1,3,4,5]\n",
    "\n",
    "print(len_)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6137aa6",
   "metadata": {},
   "source": [
    "#### 1065. Index Pairs of a String ( didn't handle the overalllpig case) yet\n",
    "\n",
    "Given a string text and an array of strings words, return an array of all index pairs [i, j] so that the substring text[i...j] is in words.\n",
    "\n",
    "Return the pairs [i, j] in sorted order (i.e., sort them by their first coordinate, and in case of ties sort them by their second coordinate)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "fa133869",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3, 7], [9, 13], [10, 17]]\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: text = \"thestoryofleetcodeandme\", words = [\"story\",\"fleet\",\"leetcode\"]\n",
    "Output: [[3,7],[9,13],[10,17]]\n",
    "Example 2:\n",
    "\n",
    "Input: text = \"ababa\", words = [\"aba\",\"ab\"]\n",
    "Output: [[0,1],[0,2],[2,3],[2,4]]\n",
    "Explanation: Notice that matches can overlap, see \"aba\" is found in [0,2] and [2,4].\n",
    " \n",
    "\n",
    "Constraints:\n",
    "\n",
    "1 <= text.length <= 100\n",
    "1 <= words.length <= 20\n",
    "1 <= words[i].length <= 50\n",
    "text and words[i] consist of lowercase English letters.\n",
    "All the strings of words are unique.\n",
    "\"\"\"\n",
    "\n",
    "text = \"thestoryofleetcodeandme\"\n",
    "words = [\"story\",\"fleet\",\"leetcode\"]\n",
    "\n",
    "text = \"thestoryofleetcodeandme\"\n",
    "words = [\"story\",\"fleet\",\"leetcode\"]\n",
    "\n",
    "ans = []\n",
    "for i in words:\n",
    "\n",
    "    curr = []\n",
    "\n",
    "    start = text.find(i)\n",
    "    end = start + len(i)-1\n",
    "\n",
    "    curr.append(start)\n",
    "    curr.append(end)\n",
    "\n",
    "    ans.append(curr)\n",
    "\n",
    "print(ans)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6da2e1c0",
   "metadata": {},
   "source": [
    "#### 2367. Number of Arithmetic Triplets\n",
    "\n",
    "You are given a 0-indexed, strictly increasing integer array nums and a positive integer diff. A triplet (i, j, k) is an arithmetic triplet if the following conditions are met:\n",
    "\n",
    "i < j < k,\n",
    "nums[j] - nums[i] == diff, and\n",
    "nums[k] - nums[j] == diff.\n",
    "Return the number of unique arithmetic triplets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "2e0cf2c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: nums = [0,1,4,6,7,10], diff = 3\n",
    "Output: 2\n",
    "Explanation:\n",
    "(1, 2, 4) is an arithmetic triplet because both 7 - 4 == 3 and 4 - 1 == 3.\n",
    "(2, 4, 5) is an arithmetic triplet because both 10 - 7 == 3 and 7 - 4 == 3. \n",
    "Example 2:\n",
    "\n",
    "Input: nums = [4,5,6,7,8,9], diff = 2\n",
    "Output: 2\n",
    "Explanation:\n",
    "(0, 2, 4) is an arithmetic triplet because both 8 - 6 == 2 and 6 - 4 == 2.\n",
    "(1, 3, 5) is an arithmetic triplet because both 9 - 7 == 2 and 7 - 5 == 2.\n",
    " \n",
    "\n",
    "Constraints:\n",
    "\n",
    "3 <= nums.length <= 200\n",
    "0 <= nums[i] <= 200\n",
    "1 <= diff <= 50\n",
    "nums is strictly increasing.\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "nums = [4,5,6,7,8,9]\n",
    "diff = 2\n",
    "\n",
    "\n",
    "# strictly increasing array so we can use twoPonters \n",
    "\n",
    "\n",
    "def countTriplets(nums, diff):\n",
    "    count = {}\n",
    "    tripletCount = 0\n",
    "\n",
    "    for num in nums:\n",
    "        if num - diff in count:\n",
    "            tripletCount += count[num - diff]\n",
    "        if num in count:\n",
    "            count[num] += count.get(num - diff, 0)\n",
    "        else:\n",
    "            count[num] = count.get(num - diff, 0)\n",
    "\n",
    "    return tripletCount\n",
    "\n",
    "countTriplets(nums, diff)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1023c5fe",
   "metadata": {},
   "source": [
    "#### 1909. Remove One Element to Make the Array Strictly Increasing\n",
    "\n",
    "(Facebook Apple eBay)\n",
    "\n",
    "Given a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. If the array is already strictly increasing, return true.\n",
    "\n",
    "The array nums is strictly increasing if nums[i - 1] < nums[i] for each index (1 <= i < nums.length)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "70498d61",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: nums = [1,2,10,5,7]\n",
    "Output: true\n",
    "Explanation: By removing 10 at index 2 from nums, it becomes [1,2,5,7].\n",
    "[1,2,5,7] is strictly increasing, so return true.\n",
    "Example 2:\n",
    "\n",
    "Input: nums = [2,3,1,2]\n",
    "Output: false\n",
    "Explanation:\n",
    "[3,1,2] is the result of removing the element at index 0.\n",
    "[2,1,2] is the result of removing the element at index 1.\n",
    "[2,3,2] is the result of removing the element at index 2.\n",
    "[2,3,1] is the result of removing the element at index 3.\n",
    "No resulting array is strictly increasing, so return false.\n",
    "Example 3:\n",
    "\n",
    "Input: nums = [1,1,1]\n",
    "Output: false\n",
    "Explanation: The result of removing any element is [1,1].\n",
    "[1,1] is not strictly increasing, so return false.\n",
    " \n",
    "\n",
    "Constraints:\n",
    "\n",
    "2 <= nums.length <= 1000\n",
    "1 <= nums[i] <= 1000\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "nums = [1,2,10,5,7]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91235aee",
   "metadata": {},
   "source": [
    "#### 760. Find Anagram Mappings\n",
    "`Google`\n",
    "\n",
    "\n",
    "You are given two integer arrays nums1 and nums2 where nums2 is an anagram of nums1. Both arrays may contain duplicates.\n",
    "\n",
    "Return an index mapping array mapping from nums1 to nums2 where mapping[i] = j means the ith element in nums1 appears in nums2 at index j. If there are multiple answers, return any of them.\n",
    "\n",
    "An array a is an anagram of an array b means b is made by randomizing the order of the elements in a."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "699e7a8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 4, 3, 2, 0]\n",
      "[0, 1]\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: nums1 = [12,28,46,32,50], nums2 = [50,12,32,46,28]\n",
    "Output: [1,4,3,2,0]\n",
    "Explanation: As mapping[0] = 1 because the 0th element of nums1 appears at nums2[1], and mapping[1] = 4 because the 1st element of nums1 appears at nums2[4], and so on.\n",
    "Example 2:\n",
    "\n",
    "Input: nums1 = [84,46], nums2 = [84,46]\n",
    "Output: [0,1]\n",
    " \n",
    "\n",
    "Constraints:\n",
    "\n",
    "1 <= nums1.length <= 100\n",
    "nums2.length == nums1.length\n",
    "0 <= nums1[i], nums2[i] <= 105\n",
    "nums2 is an anagram of nums1.\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "def anagramMappings(nums1, nums2):\n",
    "    \"\"\"\n",
    "    :type nums1: List[int]\n",
    "    :type nums2: List[int]\n",
    "    :rtype: List[int]\n",
    "    \"\"\"\n",
    "\n",
    "    #store nums 2 in a dict\n",
    "\n",
    "    dict_2 = {}\n",
    "    for i in range(len(nums2)):\n",
    "\n",
    "        # use values of nums as a key \n",
    "        dict_2[nums2[i]] = i\n",
    "\n",
    "    mapping = []\n",
    "    for i in nums1:\n",
    "        mapping.append(dict_2[i])\n",
    "\n",
    "    return mapping\n",
    "\n",
    "\n",
    "nums1 = [12,28,46,32,50]\n",
    "nums2 = [50,12,32,46,28]\n",
    "#Output: [1,4,3,2,0] <- index mapping from nums1 to nums2 \n",
    "print(anagramMappings(nums1, nums2))\n",
    "\n",
    "nums1 = [84,46]\n",
    "nums2 = [84,46]\n",
    "print(anagramMappings(nums1, nums2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "436bec21",
   "metadata": {},
   "source": [
    "#### 2535. Difference Between Element Sum and Digit Sum of an Array\n",
    "\n",
    "You are given a positive integer array nums.\n",
    "\n",
    "The element sum is the sum of all the elements in nums.\n",
    "The digit sum is the sum of all the digits (not necessarily distinct) that appear in nums.\n",
    "Return the absolute difference between the element sum and digit sum of nums.\n",
    "\n",
    "Note that the absolute difference between two integers x and y is defined as |x - y|."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "7c255e0f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: nums = [1,15,6,3]\n",
    "Output: 9\n",
    "Explanation: \n",
    "The element sum of nums is 1 + 15 + 6 + 3 = 25.\n",
    "The digit sum of nums is 1 + 1 + 5 + 6 + 3 = 16.\n",
    "The absolute difference between the element sum and digit sum is |25 - 16| = 9.\n",
    "Example 2:\n",
    "\n",
    "Input: nums = [1,2,3,4]\n",
    "Output: 0\n",
    "Explanation:\n",
    "The element sum of nums is 1 + 2 + 3 + 4 = 10.\n",
    "The digit sum of nums is 1 + 2 + 3 + 4 = 10.\n",
    "The absolute difference between the element sum and digit sum is |10 - 10| = 0.\n",
    " \n",
    "\n",
    "Constraints:\n",
    "\n",
    "1 <= nums.length <= 2000\n",
    "1 <= nums[i] <= 2000\n",
    "\"\"\"\n",
    "\n",
    "def differenceOfSum(nums):\n",
    "        \"\"\"\n",
    "        :type nums: List[int]\n",
    "        :rtype: int\n",
    "        \"\"\"\n",
    "\n",
    "        elemSum = sum(nums)\n",
    "\n",
    "        #digitsum\n",
    "\n",
    "        digits = []\n",
    "\n",
    "        for i in nums:\n",
    "\n",
    "            if i > 9:\n",
    "\n",
    "                #split two digit nums\n",
    "\n",
    "                list_ = list( map(int, str(i)))\n",
    "                digits.extend(list_)\n",
    "\n",
    "            else:\n",
    "                digits.append(i)\n",
    "\n",
    "        digitSum = sum(digits)\n",
    "\n",
    "        return abs(elemSum - digitSum)\n",
    "    \n",
    "    \n",
    "nums1 = [1,15,6,3]\n",
    "nums2 = [1,2,3,4]\n",
    "\n",
    "\n",
    "print(differenceOfSum(nums1))\n",
    "print(differenceOfSum(nums2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "8c81661c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "lis = [i for i in range(3)]\n",
    "\n",
    "ans = [0] * 3\n",
    "\n",
    "\n",
    "for i in range(len(lis)):\n",
    "    \n",
    "    if (lis[i] % 3 == 0) and (lis[i] %5 == 0):\n",
    "        ans[i] = \"FizzBuzz\"\n",
    "        print(i)\n",
    "    elif lis[i] % 3 == 0:\n",
    "        ans[i] = \"Fizz\"\n",
    "    elif lis[i] % 5 == 0:\n",
    "        ans[i] = \"Buzz\"\n",
    "    else:\n",
    "        ans[i] = str(lis[i])\n",
    "        \n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "96cc3591",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lis = [i+1 for i in range(3)]\n",
    "lis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cefe8549",
   "metadata": {},
   "source": [
    "### 557. Reverse Words in a String III\n",
    "\n",
    "Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "debce491",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "s'teL ekat edoCteeL tsetnoc\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: s = \"Let's take LeetCode contest\"\n",
    "Output: \"s'teL ekat edoCteeL tsetnoc\"\n",
    "Example 2:\n",
    "\n",
    "Input: s = \"God Ding\"\n",
    "Output: \"doG gniD\"\n",
    " \n",
    "\n",
    "Constraints:\n",
    "\n",
    "1 <= s.length <= 5 * 104\n",
    "s contains printable ASCII characters.\n",
    "s does not contain any leading or trailing spaces.\n",
    "There is at least one word in s.\n",
    "All the words in s are separated by a single space.\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def reverseWords(s):\n",
    "    \"\"\"\n",
    "    :type s: str\n",
    "    :rtype: str\n",
    "    \"\"\"\n",
    "\n",
    "    word_list = s.split()\n",
    "    \n",
    "    revList =[]\n",
    "    for w in word_list:\n",
    "        \n",
    "        r = len(w) - 1\n",
    "\n",
    "        wRev = []\n",
    "        while (r >= 0):\n",
    "            wRev.append(w[r])\n",
    "    \n",
    "            r -=1\n",
    "        \n",
    "        revList.append(\"\".join(wRev))\n",
    "\n",
    "\n",
    "    return \" \".join(revList)\n",
    "    \n",
    "    \n",
    "\n",
    "s = \"Let's take LeetCode contest\"\n",
    "\n",
    "ans = reverseWords(s)\n",
    "print(ans)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f065c36b",
   "metadata": {},
   "source": [
    "### 1313. Decompress Run-Length Encoded List\n",
    "\n",
    "Easy | Apple Amazon Google\n",
    "\n",
    "We are given a list nums of integers representing a list compressed with run-length encoding.\n",
    "\n",
    "Consider each adjacent pair of elements [freq, val] = [nums[2*i], nums[2*i+1]] (with i >= 0).  For each such pair, there are freq elements with value val concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.\n",
    "\n",
    "Return the decompressed list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "7462e3da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 4, 4, 4]\n",
      "[1, 3, 3]\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: nums = [1,2,3,4]\n",
    "Output: [2,4,4,4]\n",
    "Explanation: The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2].\n",
    "The second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].\n",
    "At the end the concatenation [2] + [4,4,4] is [2,4,4,4].\n",
    "Example 2:\n",
    "\n",
    "Input: nums = [1,1,2,3]\n",
    "Output: [1,3,3]\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "def decompressRLElist(nums):\n",
    "    \"\"\"\n",
    "    :type nums: List[int]\n",
    "    :rtype: List[int]\n",
    "    \"\"\"\n",
    "\n",
    "    decompressed = []\n",
    "    for i in range(0, len(nums), 2):\n",
    "        freq = nums[i]\n",
    "        val = nums[i + 1]\n",
    "        decompressed.extend([val] * freq)\n",
    "    return decompressed\n",
    "\n",
    "\n",
    "nums1 = [1,2,3,4]\n",
    "nums2 = [1,1,2,3]\n",
    "\n",
    "print(decompressRLElist(nums1))\n",
    "print(decompressRLElist(nums2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "312e7055",
   "metadata": {},
   "source": [
    "### 1656. Design an Ordered Stream\n",
    "Easy Bloomberg\n",
    "\n",
    "There is a stream of n (idKey, value) pairs arriving in an arbitrary order, where idKey is an integer between 1 and n and value is a string. No two pairs have the same id.\n",
    "\n",
    "Design a stream that returns the values in increasing order of their IDs by returning a chunk (list) of values after each insertion. The concatenation of all the chunks should result in a list of the sorted values.\n",
    "\n",
    "Implement the OrderedStream class:\n",
    "\n",
    "OrderedStream(int n) Constructs the stream to take n values.\n",
    "String[] insert(int idKey, String value) Inserts the pair (idKey, value) into the stream, then returns the largest possible chunk of currently inserted values that appear next in the order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "1bf15f32",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['ddddd', 'eeeee']"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "Input\n",
    "[\"OrderedStream\", \"insert\", \"insert\", \"insert\", \"insert\", \"insert\"]\n",
    "[[5], [3, \"ccccc\"], [1, \"aaaaa\"], [2, \"bbbbb\"], [5, \"eeeee\"], [4, \"ddddd\"]]\n",
    "Output\n",
    "[null, [], [\"aaaaa\"], [\"bbbbb\", \"ccccc\"], [], [\"ddddd\", \"eeeee\"]]\n",
    "\n",
    "Explanation\n",
    "// Note that the values ordered by ID is [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\"].\n",
    "OrderedStream os = new OrderedStream(5);\n",
    "os.insert(3, \"ccccc\"); // Inserts (3, \"ccccc\"), returns [].\n",
    "os.insert(1, \"aaaaa\"); // Inserts (1, \"aaaaa\"), returns [\"aaaaa\"].\n",
    "os.insert(2, \"bbbbb\"); // Inserts (2, \"bbbbb\"), returns [\"bbbbb\", \"ccccc\"].\n",
    "os.insert(5, \"eeeee\"); // Inserts (5, \"eeeee\"), returns [].\n",
    "os.insert(4, \"ddddd\"); // Inserts (4, \"ddddd\"), returns [\"ddddd\", \"eeeee\"].\n",
    "// Concatentating all the chunks returned:\n",
    "// [] + [\"aaaaa\"] + [\"bbbbb\", \"ccccc\"] + [] + [\"ddddd\", \"eeeee\"] = [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\"]\n",
    "// The resulting order is the same as the order above.\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "class OrderedStream(object):\n",
    "\n",
    "    def __init__(self, n):\n",
    "        \"\"\"\n",
    "        :type n: int\n",
    "        \"\"\"\n",
    "\n",
    "        self.values = [None] * n  # Array to store the values\n",
    "        self.ptr = 0  # Pointer to the current position in the result array\n",
    "\n",
    "        \n",
    "\n",
    "    def insert(self, idKey, value):\n",
    "        \"\"\"\n",
    "        :type idKey: int\n",
    "        :type value: str\n",
    "        :rtype: List[str]\n",
    "        \"\"\"\n",
    "\n",
    "        idKey -= 1  # Convert 1-indexed ID to 0-indexed array index\n",
    "        self.values[idKey] = value  # Store the value at the corresponding index\n",
    "\n",
    "        chunk = []  # List to store the chunk of values\n",
    "\n",
    "        if idKey == self.ptr:\n",
    "            # If the current value is the next available position in the result array\n",
    "            while self.ptr < len(self.values) and self.values[self.ptr]:\n",
    "                # Add values from the current position up to the next available position\n",
    "                chunk.append(self.values[self.ptr])\n",
    "                self.ptr += 1\n",
    "\n",
    "        return chunk\n",
    "    \n",
    "    \n",
    "os = OrderedStream(5)\n",
    "\n",
    "os.insert(3, \"ccccc\") #/ Inserts (3, \"ccccc\"), returns [].\n",
    "os.insert(1, \"aaaaa\") #Inserts (1, \"aaaaa\"), returns [\"aaaaa\"].\n",
    "os.insert(2, \"bbbbb\") # Inserts (2, \"bbbbb\"), returns [\"bbbbb\", \"ccccc\"].\n",
    "os.insert(5, \"eeeee\") # Inserts (5, \"eeeee\"), returns [].\n",
    "os.insert(4, \"ddddd\") # Inserts (4, \"ddddd\"), returns [\"ddddd\", \"eeeee\"].\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "2db4ed27",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "73\n"
     ]
    }
   ],
   "source": [
    "keyboard = \"pqrstuvwxyzabcdefghijklmno\"\n",
    "word = \"leetcode\"\n",
    "\n",
    "keyDict = {}\n",
    "ls = list(keyboard)\n",
    "\n",
    "keyDict = {}\n",
    "\n",
    "for i in ls:\n",
    "    \n",
    "    keyDict[i] = ls.index(i)\n",
    "    \n",
    "    \n",
    "time = 0\n",
    "prevIndex  = 0\n",
    "\n",
    "for c in word:\n",
    "    \n",
    "    currentIndex = keyDict[c]\n",
    "    \n",
    "    time += abs(currentIndex - prevIndex)\n",
    "    \n",
    "    prevIndex = currentIndex\n",
    "\n",
    "    \n",
    "print(time)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa96686f",
   "metadata": {},
   "source": [
    "### 2418. Sort the People\n",
    "\n",
    "You are given an array of strings names, and an array heights that consists of distinct positive integers. Both arrays are of length n.\n",
    "\n",
    "For each index i, names[i] and heights[i] denote the name and height of the ith person.\n",
    "\n",
    "Return names sorted in descending order by the people's heights."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "c36439f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Mary', 'Emma', 'John']\n",
      "['Bob', 'Alice', 'Bob']\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: names = [\"Mary\",\"John\",\"Emma\"], heights = [180,165,170]\n",
    "Output: [\"Mary\",\"Emma\",\"John\"]\n",
    "Explanation: Mary is the tallest, followed by Emma and John.\n",
    "Example 2:\n",
    "\n",
    "Input: names = [\"Alice\",\"Bob\",\"Bob\"], heights = [155,185,150]\n",
    "Output: [\"Bob\",\"Alice\",\"Bob\"]\n",
    "Explanation: The first Bob is the tallest, followed by Alice and the second Bob.\n",
    " \n",
    "\n",
    "Constraints:\n",
    "\n",
    "n == names.length == heights.length\n",
    "1 <= n <= 103\n",
    "1 <= names[i].length <= 20\n",
    "1 <= heights[i] <= 105\n",
    "names[i] consists of lower and upper case English letters.\n",
    "All the values of heights are distinct.\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "names = [\"Mary\",\"John\",\"Emma\"]\n",
    "heights = [180,165,170]\n",
    "\n",
    "\n",
    "def sort_people(names, heights):\n",
    "    \n",
    "    # Create a list of tuples (name, height) for each person\n",
    "    people = list(zip(names, heights))\n",
    "    \n",
    "    # Sort the list of people based on heights in descending order\n",
    "    people.sort(key=lambda x: x[1], reverse=True)\n",
    "    \n",
    "    # Extract the sorted names from the sorted list of people\n",
    "    sorted_names = [person[0] for person in people]\n",
    "    \n",
    "    return sorted_names\n",
    "\n",
    "\n",
    "names1 = [\"Mary\",\"John\",\"Emma\"]\n",
    "heights1 = [180,165,170]\n",
    "print(sort_people(names1, heights1))  # Output: [\"Mary\",\"Emma\",\"John\"]\n",
    "\n",
    "names2 = [\"Alice\",\"Bob\",\"Bob\"]\n",
    "heights2 = [155,185,150]\n",
    "print(sort_people(names2, heights2))  # Output: [\"Bob\",\"Alice\",\"Bob\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4153620e",
   "metadata": {},
   "source": [
    "### 768. Merge Strings Alternately\n",
    "\n",
    "Easy  | Amazon Google Uber\n",
    "You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.\n",
    "\n",
    "Return the merged string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "41ed89de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "apbqcr\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: word1 = \"abc\", word2 = \"pqr\"\n",
    "Output: \"apbqcr\"\n",
    "Explanation: The merged string will be merged as so:\n",
    "word1:  a   b   c\n",
    "word2:    p   q   r\n",
    "merged: a p b q c r\n",
    "Example 2:\n",
    "\n",
    "Input: word1 = \"ab\", word2 = \"pqrs\"\n",
    "Output: \"apbqrs\"\n",
    "Explanation: Notice that as word2 is longer, \"rs\" is appended to the end.\n",
    "word1:  a   b \n",
    "word2:    p   q   r   s\n",
    "merged: a p b q   r   s\n",
    "Example 3:\n",
    "\n",
    "Input: word1 = \"abcd\", word2 = \"pq\"\n",
    "Output: \"apbqcd\"\n",
    "Explanation: Notice that as word1 is longer, \"cd\" is appended to the end.\n",
    "word1:  a   b   c   d\n",
    "word2:    p   q \n",
    "merged: a p b q c   d\n",
    " \n",
    "\n",
    "Constraints:\n",
    "\n",
    "1 <= word1.length, word2.length <= 100\n",
    "word1 and word2 consist of lowercase English letters.\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def mergeAlternately(word1, word2):\n",
    "    merged = ''\n",
    "    i = 0\n",
    "    j = 0\n",
    "    while i < len(word1) and j < len(word2):\n",
    "        merged += word1[i]\n",
    "        merged += word2[j]\n",
    "        i += 1\n",
    "        j += 1\n",
    "\n",
    "    merged += word1[i:]  # Append remaining characters from word1\n",
    "    merged += word2[j:]  # Append remaining characters from word2\n",
    "\n",
    "    return merged\n",
    "\n",
    "# Example usage\n",
    "word1 = \"abc\"\n",
    "word2 = \"pqr\"\n",
    "merged_string = mergeAlternately(word1, word2)\n",
    "print(merged_string)  # Output: \"apbqcr\"\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32877346",
   "metadata": {},
   "source": [
    "### 1859. Sorting the Sentence\n",
    "\n",
    "**Easy** | `Facebook` `Google` `Amazon`\n",
    "\n",
    "A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.\n",
    "\n",
    "A sentence can be shuffled by appending the 1-indexed word position to each word then rearranging the words in the sentence.\n",
    "\n",
    "For example, the sentence \"This is a sentence\" can be shuffled as \"sentence4 a3 is2 This1\" or \"is2 sentence4 This1 a3\".\n",
    "Given a shuffled sentence s containing no more than 9 words, reconstruct and return the original sentence.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "40dc10f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is a sentence\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "\n",
    "Example 1:\n",
    "\n",
    "Input: s = \"is2 sentence4 This1 a3\"\n",
    "Output: \"This is a sentence\"\n",
    "Explanation: Sort the words in s to their original positions \"This1 is2 a3 sentence4\", then remove the numbers.\n",
    "Example 2:\n",
    "\n",
    "Input: s = \"Myself2 Me1 I4 and3\"\n",
    "Output: \"Me Myself and I\"\n",
    "Explanation: Sort the words in s to their original positions \"Me1 Myself2 and3 I4\", then remove the numbers.\n",
    " \n",
    "\n",
    "Constraints:\n",
    "\n",
    "2 <= s.length <= 200\n",
    "s consists of lowercase and uppercase English letters, spaces, and digits from 1 to 9.\n",
    "The number of words in s is between 1 and 9.\n",
    "The words in s are separated by a single space.\n",
    "s contains no leading or trailing spaces.\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def sortWords(s):\n",
    "\n",
    "    words = s.split()\n",
    "    dic = {}\n",
    "    \n",
    "    for word in words:\n",
    "\n",
    "        # index position from zero\n",
    "        position = int(word[-1]) - 1 \n",
    "        word = word[:-1]\n",
    "\n",
    "        dic[position] = word\n",
    "\n",
    "    sortedWords = [ dic[i] for i in range(len(dic)) ]\n",
    "    \n",
    "    return \" \".join(sortedWords)\n",
    "\n",
    "s = \"is2 sentence4 This1 a3\"\n",
    "\n",
    "print(sortWords(s))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0efe006d",
   "metadata": {},
   "source": [
    "### 1221. Split a String in Balanced Strings\n",
    "\n",
    "**Easy**\n",
    "\n",
    "\n",
    "Balanced strings are those that have an equal quantity of 'L' and 'R' characters.\n",
    "\n",
    "Given a balanced string s, split it into some number of substrings such that:\n",
    "\n",
    "Each substring is balanced.\n",
    "Return the maximum number of balanced strings you can obtain."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "a1ef97b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: s = \"RLRRLLRLRL\"\n",
    "Output: 4\n",
    "Explanation: s can be split into \"RL\", \"RRLL\", \"RL\", \"RL\", each substring contains same number of 'L' and 'R'.\n",
    "Example 2:\n",
    "\n",
    "Input: s = \"RLRRRLLRLL\"\n",
    "Output: 2\n",
    "Explanation: s can be split into \"RL\", \"RRRLLRLL\", each substring contains same number of 'L' and 'R'.\n",
    "Note that s cannot be split into \"RL\", \"RR\", \"RL\", \"LR\", \"LL\", because the 2nd and 5th substrings are not balanced.\n",
    "Example 3:\n",
    "\n",
    "Input: s = \"LLLLRRRR\"\n",
    "Output: 1\n",
    "Explanation: s can be split into \"LLLLRRRR\".\n",
    "\n",
    "Constraints:\n",
    "\n",
    "2 <= s.length <= 1000\n",
    "s[i] is either 'L' or 'R'.\n",
    "s is a balanced string.\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def balancedString(s):\n",
    "    \n",
    "    count = 0\n",
    "    l, r = 0, 0\n",
    "\n",
    "    for c in s:\n",
    "\n",
    "        if c == \"R\":\n",
    "            r +=1\n",
    "\n",
    "        if c == \"L\":\n",
    "            l +=1\n",
    "        \n",
    "        #when balanced count the balance & start over\n",
    "        if r == l:\n",
    "            count +=1\n",
    "            r = 0\n",
    "            \n",
    "    return count\n",
    "\n",
    "s = \"RLRRLLRLRL\"\n",
    "print(balancedString(s))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b380afd6",
   "metadata": {},
   "source": [
    "### 1832. Check if the Sentence Is Pangram\n",
    "\n",
    "**Easy**  | `Google` `Bloomberg` `Goldman Sachs`\n",
    "\n",
    "A `pangram` is a sentence where every letter of the English alphabet appears at least once.\n",
    "\n",
    "Given a string sentence containing only lowercase English letters, return true if sentence is a pangram, or false otherwise."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "3a4bfbe2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1:\n",
    "\n",
    "Input: sentence = \"thequickbrownfoxjumpsoverthelazydog\"\n",
    "Output: true\n",
    "Explanation: sentence contains at least one of every letter of the English alphabet.\n",
    "Example 2:\n",
    "\n",
    "Input: sentence = \"leetcode\"\n",
    "Output: false\n",
    " \n",
    "\n",
    "Constraints:\n",
    "\n",
    "1 <= sentence.length <= 1000\n",
    "sentence consists of lowercase English letters.\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "\n",
    "def checkIfPangram(sentence):\n",
    "    \"\"\"\n",
    "    :type sentence: str\n",
    "    :rtype: bool\n",
    "    \"\"\"\n",
    "\n",
    "    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n",
    "\n",
    "    alphaSet = set(alpha)\n",
    "    inputSet = set(sentence)\n",
    "\n",
    "    if alphaSet == inputSet:\n",
    "\n",
    "        return True\n",
    "\n",
    "    else:\n",
    "\n",
    "        return False\n",
    "        \n",
    "\n",
    "        \n",
    "        \n",
    "s1 = \"thequickbrownfoxjumpsoverthelazydog\"\n",
    "s2 = \"leetcode\"\n",
    "\n",
    "print(checkIfPangram(s1))\n",
    "print(checkIfPangram(s2))\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
