{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5339ebb0",
   "metadata": {},
   "source": [
    "# Data Structures and Algirithms\n",
    "\n",
    "\n",
    "# 1. Arrys \n",
    "\n",
    "Algorithms that manipulate arrays/strings use various techniques such as:\n",
    "1. two pointers\n",
    "    - we can move the pointers towrds eachother, move them both in the same dircetion, etc. \n",
    "2. sliding window\n",
    "    - window size could be fixed / dynamic\n",
    "3. pre-fix sum\n",
    "4. other common patterns like: \n",
    "\n",
    "    - string building\n",
    "    - Subarrays/substrings, subsequences, and subsets\n",
    "\n",
    "\n",
    "## 1. 1 Two pointers\n",
    "\n",
    "Two-pointers is an extremely common technique used to solve array and string problems. It involves having two integer variables that both move along an iterable. In this article, we are focusing on arrays and strings. This means we will have two integers, usually named something like i and j, or left and right which each represent an index of the array or string.\n",
    "\n",
    "#### There are several ways to implement two-pointers: \n",
    "\n",
    "#### Start the pointers at the edges of the input. Move them towards each other until they meet.\n",
    "#### Move along both inputs simultaneously until all elements have been visited."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "eb15bdfc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1: Return true if a given string is a palindrome, \n",
    "false otherwise.\n",
    "\n",
    "A string is a palindrome if it reads the same forwards as backwards. \n",
    "That means, after reversing it, it is still the same string. \n",
    "\n",
    "For example: \"abcdcba\", or \"racecar\".\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def check_if_palindrome(s):\n",
    "    left = 0\n",
    "    right = len(s) - 1\n",
    "\n",
    "    while left < right:\n",
    "        if s[left] != s[right]:\n",
    "            return False\n",
    "        left += 1\n",
    "        right -= 1\n",
    "    \n",
    "    return True\n",
    "\n",
    "\n",
    "print(check_if_palindrome(\"racecar\"))\n",
    "print(check_if_palindrome(\"abcdcba\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "edf5e55a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 2: Given a sorted array of unique integers and a target integer, \n",
    "return true if there exists a pair of numbers that sum to target, \n",
    "false otherwise. This problem is similar to Two Sum.\n",
    "\n",
    "For example, given nums = [1, 2, 4, 6, 8, 9, 14, 15] and \n",
    "target = 13, return true because 4 + 9 = 13.\n",
    "\"\"\"\n",
    "\n",
    "def check_for_target(nums, target):\n",
    "    left = 0\n",
    "    right = len(nums) - 1\n",
    "\n",
    "    while left < right:\n",
    "        curr = nums[left] + nums[right]\n",
    "        if curr == target:\n",
    "            return True\n",
    "        if curr > target:\n",
    "            right -= 1\n",
    "        else:\n",
    "            left += 1\n",
    "    \n",
    "    return False\n",
    "\n",
    "nums = [1, 2, 4, 6, 8, 9, 14, 15]  \n",
    "target = 13\n",
    "\n",
    "check_for_target(nums, target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d8719e9d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 9, 16, 100]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "EXERCISE: Given an integer array nums sorted in non-decreasing order, \n",
    "return an array of the squares of each number sorted in non-decreasing order.\n",
    "\n",
    "Input: nums = [-4,-1,0,3,10]\n",
    "Output: [0,1,9,16,100]\n",
    "Explanation: After squaring, the array becomes [16,1,0,9,100].\n",
    "After sorting, it becomes [0,1,9,16,100].\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "class Solution_sortedSquares(object):\n",
    "    \n",
    "    def sortedSquares(self, nums):\n",
    "        \"\"\"\n",
    "        :type nums: List[int]\n",
    "        :rtype: List[int]\n",
    "        \"\"\"\n",
    "        left = 0\n",
    "        right = len(nums) - 1\n",
    "        sorted_list  = [0] * len(nums) # initialize empty list\n",
    "        \n",
    "         # rage(start, stop, step)\n",
    "        for i in range(len(nums) - 1, -1, -1):\n",
    "            if (abs(nums[left]) < abs(nums[right])):\n",
    "                square = nums[right]\n",
    "                right -=1\n",
    "                \n",
    "            else:\n",
    "                square = nums[left]\n",
    "                left +=1\n",
    "                \n",
    "            sorted_list[i] = square * square\n",
    "        return sorted_list\n",
    "        \n",
    "        \n",
    "                                   \n",
    "Solution_sortedSquares_Obj = Solution_sortedSquares();\n",
    "nums = [-4,-1,0,3,10]\n",
    "Solution_sortedSquares_Obj.sortedSquares(nums)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e3becfd",
   "metadata": {},
   "source": [
    "### 1.2. Move along both inputs simultaneously until all elements have been visited."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ceb442d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 3, 4, 5, 6, 7, 20]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 3: Given two sorted integer arrays, return an array that combines both of them and is also sorted.\n",
    "\n",
    "The trivial approach would be to first combine both input arrays and then perform a sort. \n",
    "If we have n = arr1.length + arr2.length, then this gives a time complexity of \n",
    "O(nâ‹…logn) (the cost of sorting). \n",
    "\n",
    "This would be a good approach if the input arrays were not sorted, \n",
    "but because they are sorted, we can take advantage of the two-pointers technique to improve to O(n).\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def combine(arr1, arr2):\n",
    "    ans = []\n",
    "    i = j = 0\n",
    "    while i < len(arr1) and j < len(arr2):\n",
    "        if arr1[i] < arr2[j]:\n",
    "            ans.append(arr1[i])\n",
    "            i += 1\n",
    "        else:\n",
    "            ans.append(arr2[j])\n",
    "            j += 1\n",
    "    \n",
    "    while i < len(arr1):\n",
    "        ans.append(arr1[i])\n",
    "        i += 1\n",
    "    \n",
    "    while j < len(arr2):\n",
    "        ans.append(arr2[j])\n",
    "        j += 1\n",
    "    \n",
    "    return ans\n",
    "\n",
    "\n",
    "list_1 = [1,4,7,20]\n",
    "list_2 = [3,5,6]\n",
    "\n",
    "combine(list_1, list_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "da4d8e80",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 4: 392. Is Subsequence.\n",
    "\n",
    "Given two strings s and t, \n",
    "return true if s is a subsequence of t, \n",
    "or false otherwise.\n",
    "\n",
    "A subsequence of a string is a new string that is formed from the original string \n",
    "by deleting some (can be none) of the characters without disturbing the relative \n",
    "positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "class Solution:\n",
    "    def isSubsequence(self, s: str, t: str) -> bool:\n",
    "        i = j = 0\n",
    "        while i < len(s) and j < len(t):\n",
    "            if s[i] == t[j]:\n",
    "                i += 1\n",
    "            j += 1\n",
    "\n",
    "        return i == len(s)\n",
    "\n",
    "s = \"ace\"\n",
    "t = \"abcde\"\n",
    "\n",
    "s_Obj = Solution()\n",
    "s_Obj.isSubsequence(s, t)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12e780ab",
   "metadata": {},
   "source": [
    "# 2. Sliding window"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d8ac9792",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 1: Given an array of positive integers nums and an integer k, \n",
    "find the length of the longest subarray whose sum is less than or equal to k\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "def find_length(nums, k):\n",
    "    \n",
    "    left = currentSum = ans = 0\n",
    "    \n",
    "    \n",
    "    for right in range(len(nums)):\n",
    "        \n",
    "        currentSum += nums[right]\n",
    "        \n",
    "        while currentSum > k:\n",
    "            currentSum -= nums[left]\n",
    "            left += 1\n",
    "            \n",
    "            #print(left, right)\n",
    "            \n",
    "        ans = max(ans, right - left + 1)\n",
    "    \n",
    "    return ans\n",
    "\n",
    "list_ = [3, 1, 2, 7, 4, 2, 1, 1, 5]\n",
    "target = 8\n",
    "\n",
    "find_length(list_, target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0dd1e00f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Example 2: You are given a binary substring s (a string containing only \"0\" and \"1\"). \n",
    "You may choose up to one \"0\" and flip it to a \"1\". What is the length of the longest \n",
    "substring achievable that contains only \"1\"?\n",
    "\n",
    "For example, given s = \"1101100111\", the answer is 5. If you perform the flip at \n",
    "index 2, the string becomes 1111100111.\n",
    "\"\"\"\n",
    "\n",
    "def find_length(s):\n",
    "    \n",
    "    left = curr = ans = 0 \n",
    "    \n",
    "    for right in range(len(s)):\n",
    "        \n",
    "        if s[right] == \"0\":\n",
    "            curr += 1\n",
    "            \n",
    "        while curr > 1:\n",
    "            if s[left] == \"0\":\n",
    "                curr -= 1\n",
    "            left += 1\n",
    "        ans = max(ans, right - left + 1)\n",
    "    \n",
    "    return ans\n",
    "\n",
    "st = \"1101100111\"\n",
    "\n",
    "print(find_length(st))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cbf4610b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
