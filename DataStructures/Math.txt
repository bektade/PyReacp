{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c5f659cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1634\n",
      "[1, 1296, 81, 256]\n"
     ]
    }
   ],
   "source": [
    "n = 1634\n",
    "powerList = [int(i)**len(list(str(n))) for i in list(str(n))]\n",
    "print(sum(powerList))\n",
    "print(powerList)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae95a501",
   "metadata": {},
   "source": [
    "### 1134. Armstrong Number\n",
    "\n",
    "**easy** company `Amazon`\n",
    "\n",
    "Given an integer `n`, return true if and only if it is an Armstrong number.\n",
    "\n",
    "The `k`-digit number `n` is an Armstrong number if and only if the `kth` power of each digit sums to `n`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "044bc84b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n",
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "class NumPattern(object):\n",
    "    \n",
    "    def isArmstrong(self, n):\n",
    "        \"\"\"\n",
    "        :type n: int\n",
    "        :rtype: bool\n",
    "        \"\"\"\n",
    "        \n",
    "        #len digit\n",
    "        lenDigit = len(list(str(n)))\n",
    "        \n",
    "        #power list\n",
    "        powerList = [int(i)** lenDigit for i in list(str(n))]\n",
    "        \n",
    "        armStrong = sum(powerList)\n",
    "\n",
    "        \n",
    "        if n == armStrong:\n",
    "            return True\n",
    "        else:\n",
    "            return False \n",
    "        \n",
    "\n",
    "numpat = NumPattern()\n",
    "\n",
    "n1 = 153\n",
    "n2 = 123\n",
    "n3 = 2\n",
    "n4 = 1634\n",
    "\n",
    "print(numpat.isArmstrong(n1))\n",
    "print(numpat.isArmstrong(n2))\n",
    "print(numpat.isArmstrong(n3))\n",
    "print(numpat.isArmstrong(n4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a3568060",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "81\n"
     ]
    }
   ],
   "source": [
    "# Double reversal\n",
    "\n",
    "num = 1800\n",
    "\n",
    "strList = list(str(num))\n",
    "\n",
    "\n",
    "L = len(strList)\n",
    "\n",
    "\n",
    "RP = L -1\n",
    "\n",
    "\n",
    "ans =[]\n",
    "while (RP >= 0):\n",
    "    \n",
    "    currentDigit = strList[RP]\n",
    "    ans.append(currentDigit)\n",
    "    \n",
    "    RP -=1\n",
    "    \n",
    "    \n",
    "j = int(\"\".join(ans))\n",
    "print(j)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7d58ada6",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Solution(object):\n",
    "    def isSameAfterReversals(self, num):\n",
    "        \"\"\"\n",
    "        :type num: int\n",
    "        :rtype: bool\n",
    "        \"\"\"\n",
    "\n",
    "        #rev1\n",
    "        \n",
    "        rev1 = self.numReverser(num)\n",
    "        rev2 = self.numReverser(rev1)\n",
    "        \n",
    "        if rev2 == num:\n",
    "            return True\n",
    "        else:\n",
    "            return False\n",
    "        \n",
    "    def numReverser(self, num):\n",
    "        \n",
    "        strList = list(str(num))\n",
    "        L = len(strList)\n",
    "        RP = L -1\n",
    "        ans =[]\n",
    "        \n",
    "        while (RP >= 0):\n",
    "            \n",
    "            currentDigit = strList[RP]\n",
    "            if currentDigit != \"0\":\n",
    "                ans.append(currentDigit)\n",
    "                RP -=1\n",
    "            else:\n",
    "                RP -=1 \n",
    "            \n",
    "            \n",
    "        reversedStr = \"\".join(ans)\n",
    "        revNum = int(reversedStr)\n",
    "        \n",
    "        return revNum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "603269a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sol = Solution()\n",
    "\n",
    "sol.isSameAfterReversals(625)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9e511b4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
